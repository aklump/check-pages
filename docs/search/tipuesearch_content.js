var tipuesearch = {"pages":[{"title":"Changelog","text":"All notable changes to this project will be documented in this file.\n\nThe format is based on Keep a Changelog, and this project adheres to Semantic Versioning.\n\n\n\nRemoved\n\n\nThe configuration for chrome can be removed from your .yml file, it's now automatic.\n\n\nChanged\n\n\nTEST_FINISHED changed to REQUEST_TEST_FINISHED\nTEST_FINISHED now is for \\AKlump\\CheckPages\\Event\\TestEventInterface\nHow user feedback is handled and written.\n\n\n\n\nDeprecated\n\n\nRunner::getRunner\nRunner::setRunner\nwith_extras()\n\n\nChanged\n\n\nthe drupal mixin no longer sets variables with user. as the base prefix, but instead uses the passed value of user, e.g. user: foo sets: foo.id, etc.\nThe mixin config var has changed to $mixin_config instead of $config.\nadd_shorthand() callback arguments changed to ($shorthand, Test). Also you will no longer unset() the shorthand key because it's been removed from the test config.\nEvent::TEST_FINISHED has changed from \\AKlump\\CheckPages\\Event\\DriverEventInterface to \\AKlump\\CheckPages\\Event\\TestEventInterface.\nChanged is\/set to value\/set; replace is: with value:. See value plugin for details.\nrequest.method is now required; previously it could be omitted and would be assumed GET.\nRenamed data plugin to path plugin.\nSwithed to Symfony console.\n.\/check_pages became .\/check_pages run (added run as a required argument).\nBREAKING CHANGE! drupal8 and drupal7 mixins changed to a single drupal.\nBREAKING CHANGE! You must use $config instead of the like-named variable for mixin configuration. E.g. $drupal8, $drupal7 are now both just $config.\nBREAKING CHANGE! Rename global $app to $runner.\nBREAKING CHANGE! The style plugin now uses this format; (you must replace style with dom and property with style).\nyaml\n-\ndom: .visible\nstyle: display\n...\nIf expect is not explicitly provided, any value from 200 to 299 will pass the test. Previously the response code would have to be exactly 200 to pass.\n\n\nAdded\n\n\nThe concept of groups.\nThe group (--group, -g) filter\nThe import feature.\nThe authentication for Drupal now adds the following variables automatically: ${user.uid}, ${user.id}, ${user.name}, ${user.pass} for the authenticated user. That means you can use these in subsequent tests, even if not authenticating said test.\n--request and --response.\nRequest headers and body to display with --request or --show-source. If you do not want to see request and ONLY response, use --response instead of --show-source.\n--help and -h to printout CLI options.\nA debug message if test is missing assertions.\nStart and stop date and times.\n--filter now accepts multiple suites as CSV, e.g. --filter=foo,bar as well as single suites.\nThe ability to test data-serving URLs (i.e. API endpoints) using JSON Schema.\n\n\nFixed\n\n\n--quite mode was not working.\n\n\n\n\nAdded\n\n\nconfig_get()\n\n\n\n\nAdded\n\n\nThe ability to omit config\/ in the CLI. Where before you had to pass --config=config\/live, which still works, you may also pass --config=live if your configuration directory is named by the standard name of config. If it is not then this shortcut will fail.\n\n\n\n\nAdded\n\n\nOutput file urls.txt\nOutput file failures.txt\n\n\n\n\nAdded\n\n\nwhy key for message overrides.\nDisk storage of sessions storage across runners. See docs for more info.\n\n\n\n\nAdded\n\n\nCreate tests directory prompt on package install.\nAuthentication for Drupal 7 and Drupal 8 via with_extras() function.\nadd_test_option() function for custom functionality.\n\n\nRemoved\n\n\ncomposer create-project is no longer supported as it was too confusing and unnecessary to have two installation means.\n\n\n\n\nAdded\n\n\nis not\nnot matches\n\n\nChanged\n\n\nexact is now is; change all usages.\nmatch is now matches; change all usages.\nnone is now not contains; change all usages.\n\n\nRemoved\n\n\nexact\nmatch\nnone\n\n\nFixed\n\n\nJS error when the eval is used more than once per test.\n\n\n\n\nAdded\n\n\nThe header assertion plugin\n\n\n\n\nAdded\n\n\nThe javascript selector for expression evaluation.\n\n\nChanged\n\n\nIt's no longer required to add js: true to a test implementing a style\nselector. It will now be forcefully set (or overridden) to true. This is because the style selector only works when javascript is enabled.\n\n\n\n\nAdded\n\n\nAdded the none assertion to ensure a substring does not appear on the page.\n\n\n\n\nAdded\n\n\nAdded new selector 'attribute'.\nAdded ability to do style asserts.\nAdded globbing to run_suite(), e.g. run_suite('*') to run all suites. Normal glob patterns work as well, which are relative to the --dir directory, or defaults to the directory containing runner.php.\n\n\nChanged\n\n\nrun_suite() now returns void().\n\n\n\n\nAdded\n\n\nThe alias visit: may be used instead of url:\nExamples now show using visit:, though url: still works.\n\n\n\n\nAdded\n\n\n--filter parameter to limit runner to a single suite from the CLI.\n\n\n\n\nAdded\n\n\nJavascript support with Chrome.\n\n\nChanged\n\n\nThe way the CSS selector works has changed fundamentally and may break your tests. Refer to the following test YAML. Prior to 0.4 that would only choose the first .card__title on the page and assert it's text matched the expected. Starting in 0.4, all .card__titles found on the page will be matched and the assert will pass if any of them have matching text.\n\n-\n  visit: \/foo\/bar\n  find:\n    -\n      dom: .card__title\n      text: The Top of the Mountain\n\nIf you need the earlier functionality you should use the xpath selector as shown here to indicate just the first element with that class.\n\n-\n visit: \/foo\/bar\n find:\n   -\n     xpath: '(\/\/*[contains(@class, \"card__title\")])[1]'\n     text: The Top of the Mountain\n\n\n\n\n\nAdded\n\n\nAdded the --quiet flag\n\n\nChanged\n\n\nThe default output is now how it was when adding the --debug flag, use the --quiet flag for less verbosity.\nVisual layout to make reading results easier and more clear.\n\n\nRemoved\n\n\nThe --debug flag","tags":"","url":"CHANGELOG.html"},{"title":"Check Pages","text":"This project intends to provide a process of QA testing of a website, which is very fast to implement and simple to maintain. You write your tests using YAML and they can be as simple as checking for a 200 HTTP response on the homepage.\n\n-\n  visit: \/\n\n\nOr ensuring the admin section is protected.\n\n-\n  visit: \/admin\n  why: Make sure the `\/admin` path returns 403 forbidden when not logged in.\n  expect: 403\n\n\nIn a third test we can assert there is one logo image on the homepage, like so:\n\n- visit: \/\n  find:\n    - dom: '#logo img'\n      count: 1\n\n\nLastly, make sure there are no unprocessed tokens on the page (a.k.a. a substring does not appear):\n\n- visit: \/\n  find:\n    - not contains: '[site:name]'\n\n\nFor more code examples explore the \/examples directory.\n\nVisit https:\/\/aklump.github.io\/check_pages for full documentation.\n\n\n\nThe mission of this tool is to provide testing for URLS and webpages in the most simple and concise syntax possible. For testing scenarios that require element interaction, such as clicks, hovers, scrolling, etc, there are amazing projects out there such as Cypress. This project will never try to compete with that crowd, and shall always restrict it's testing of the DOM to assertions against a single snapshot of the loaded URL.\n\n\n\n\nTest Runner - A very simple PHP file that defines the configuration and what test suites to run, and in what order. @see includes\/runner.php.\nTest Suite - A YAML file that includes one or more checks against URLs. @see includes\/suite.yml.\nTest - A single URL check within a suite.\nAssertion - A single check action against the HTTP response of a test, i.e., headers, body, status code, javascript, etc.\n\n\n\n\n\nYou must install with Composer.\nTests suites are written in YAML.\nLittle to no experience with PHP is necessary. Copy and paste will suffice.\n\n\n\n\n$ composer require aklump\/check-pages --dev\n\n\n\nIn most cases the --dev is appropriate, but use your own discretion.\nYou will be asked if you want to create a directory for your tests when you install. This will copy over a basic scaffolding to build from.1\nMore detailed examples are located in the example directory.\n\n\n1Creating Test Directories At Any Time\n\nUse .\/create_test_directory outside of installation to copy scaffolding.\n\n\n\nIf you are new to this project and would like to see a demonstration, it would be a good idea to start with the examples. Run the example tests with the following commands. Then open up the files in the example\/tests directory and study them to see how they work.1\n\n\nOpen a new shell window which will run the PHP server for our example test pages.\n\n$ .\/bin\/start_test_server.sh\n\nOpen a second shell window to execute the tests.\n\n$ .\/bin\/run_tests.sh\n\n\n\nSome failing tests are also available to explore:\n\n$ .\/check_pages failing_tests_runner.php\n\n\n1 If you see no tests directory then create one and copy the contents of examples into tests. The example tests directory will only be created if you use create-project as the installation method.\n\nWriting Your First Test Suite\n\nIf you created a test directory on install then you're ready to build on that. If you did not you can do that now by running the script in vendor\/bin\/check_pages_init\n\nMultiple Configuration Files\n\nThe project is designed to be able to run the same tests using different configurations. You can create multiple configuration files so that you are able to run the same test on live and then on dev, which have different base URLs.\n\n.\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 config\/dev.yml\n    \u251c\u2500\u2500 config\/live.yml\n    \u251c\u2500\u2500 suite.yml\n    \u2514\u2500\u2500 runner.php\n\n\nIn runner.php use the following line to specify the default config file:\n\nload_config('config\/dev');\n\n\nWhen you're ready to run this using the live config add the config filename to the CLI command, e.g.,\n\n$ .\/check_pages runner.php --config=config\/live\n\n\nTest functions\n\nThe test functions for your PHP test files are found in includes\/runner_functions.inc.\n\n\n\nYes, not by default, but you are able to indicate that given tests requires Javascript be run. Read on...\n\n\n\n\nYour testing machine must have Chrome installed.\n\n\n\n\nTo support JS testing, you must indicate where your Chrome binary is located in\nyour runner configuration file, like so:\n\nchrome: \/Applications\/Google Chrome.app\/Contents\/MacOS\/Google Chrome\n\n\n\n\nUnless you enable it, or in the case the selector type (i.e., style\n, javascript) requires it, javascript is not run during testing. If you need\nto assert that an element exists, which was created from Javascript (or\notherwise need javascript to run on the page), you will need to indicate the\nfollowing in your test, namely js: true.\n\n-\n  visit: \/foo\n  js: true\n  find:\n    -\n      dom: .js-created-page-title\n      text: Javascript added me to the DOM!\n\n\n\n\nLet's say you want to assert the value of the URL fragment. You can do that with\nthe javascript selector. The value of javascript should be the expression to\nevaluate, once the page loads. Notice that you may omit the js: true as it\nwill be set automatically.\n\n-\n  visit: \/foo\n  find:\n    -\n      javascript: location.hash\n      is: \"#top\"\n\n\n\n\n\nChrome DevTools Protocol 1.3\nLearn more\nCLI parameters\nMore on parameters\nhttps:\/\/github.com\/GoogleChrome\/chrome-launcher\nhttps:\/\/peter.sh\/experiments\/chromium-command-line-switches\/\nhttps:\/\/raw.githubusercontent.com\/GoogleChrome\/chrome-launcher\/v0.8.0\/scripts\/download-chrome.sh\n\n\n\n\nUse the --filter parameter combined with a suite name to limit the runner to a single suite. This is faster than editing your runner file.\n\n.\/check_pages runner.php --filter=page_header\n\n\nOr the shorthand\n\n.\/check_pages runner.php -f page_header\n\n\nCombine more than one filter value for an OR selection\n\n.\/check_pages runner.php -f page_header -f rss\n\n\n\n\nTry using the --response to see the response source code as well.\n\n.\/check_pages failing_tests_runner.php --response\n\n\nUsage\n\nIn this case, since the project will be buried in your vendor directory, you will need to provide the directory path to your test files, when you run the test script, like this:\n\n.\/vendor\/bin\/check_pages runner.php --dir=.\/tests_check_pages\n\n\nThis example assumes a file structure like this:\n\n.\n\u251c\u2500\u2500 tests_check_pages\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 runner.php\n\u2514\u2500\u2500 vendor\n    \u2514\u2500\u2500 bin\n        \u2514\u2500\u2500 check_pages  \n\n\n\n\nIf you find this project useful... please consider making a donation.","tags":"","url":"README.html"},{"title":"Authentication","text":"If you want to check pages as an authenticated user of a website, then you have to be logged in, or authenticated before the request is made. Some authentication providers are built-in, or you can write your own using  add_test_option(). You might refer to includes\/drupal8.inc as a starting point.\n\n\n\nThis example will use the drupal8 built-in authentication provider. Note: for Drupal 7 authentication, simply change add_mixin('drupal8'... to add_mixin('drupal7'....\n\n\nCreate a YAML (or JSON) file containing user login credentials.  Do not commit this to source control. You can place this whereever, but in this example it will be located in the config directory as config\/users.yml. You may list as many users as you want. Each record must have the keys name and pass. Yes, pass is the un-hashed plaintext password for the user, so be cautious.\n\n# File: config\/users.yml\n-\n  name: admin\n  pass: 123pass\n-\n  name: member\n  pass: secret5\n\nAdd the following to your test runner file. This tells your runner.php to include the Drupal 8 authentication and from where to pull the user data.\n\n# File: runner.php\nadd_mixin('drupal8', [\n  'users' =&gt; 'config\/users.yml',\n]); \n\nIn your test suite add the user option to a test, giving the username as the value. The request for that test will be made after first authenticating that user.\n\n# File: suite.yml\n-\n user: admin\n visit: \/admin\n-\n user: member\n visit: \/admin\n expect: 403\n\n\n\n\n\n\n\nIf the login form is located at a non-standard URL, you may indicate that URL, which renders the login form, as shown here.\n\nadd_mixin('drupal8', [\n  'users' =&gt; 'config\/users.yml',\n  'login_url' =&gt; '\/login',\n]); \n\nIt's also worth nothing, once a user is authenticated, certain variables may be used on subsequenst tests. Notice how the variables persist into the second test even though it is not authenticated. The user variables will carry over into subsequent tests until the next authentication, when they will be re-set.\n\n-\nuser: testbot.member\nvisit: \/user\/${user.uid}\/edit\n-\nvisit: \/user\/${user.uid}\/edit\nexpect: 403\n-\nvisit: \/user\/${user.name}\nexpect: 200\n\nIt's possible you don't want to use the same users.yml data file for all configurations. To accommodate this you may replace the hardcoded path config\/users.yml with config_get('extras.users') and add the hard-coded path to each of your configuration files.\n\n# file: runner.php\nadd_mixin('drupal8', [\n 'users' =&gt; config_get('extras.users'),\n]); \n\n\n# file: config\/live.yml\n...\nextras:\n users: config\/users--live.yml\n\n\n# file: config\/dev.yml\n...\nextras:\n users: config\/users--dev.yml\n\nYou can capture several user IDs at once like this. Furthermore, this can be moved to an import, and you have all user IDs available to all suites, very easily by importing with - import: imports\/get_user_ids  See imports for more info.\n\n# file: imports\/_get_user_ids\n\n-\n user: site_test.worker\n set: workerUid\n is: ${user.id}\n-\n user: site_test.admin\n set: adminUid\n is: ${user.id}\n\n\n\n\n\nThe token ${user.csrf} is created automatically when you use user, and can be used as shown below:\n\n-\n  user: site_test.admin\n  url: \/cp-api\/${cp_api_public}\/jobs\n  request:\n    method: POST\n    headers:\n      X-Csrf-token: ${user.csrf}","tags":"","url":"authentication.html"},{"title":"Getting Started","text":"-\n  visit: \/foo\n\n\n\n\nBy saying that the \"page loads\", we mean that it returns a status code of 200. The following is exactly the same in function as the previous example. You can assert any HTTP status code by changing the value of expect.\n\n-\n  visit: \/foo\n  expect: 200\n\n\n\n\nFor pages that redirect you can check for both the status code and the final location.  (redirect and location may be used interchangeably.)\n\n-\n  visit: \/moved.php\n  expect: 301\n  location: \/location.html\n\n-\n  visit: \/moved.php\n  expect: 301\n  redirect: \/location.html\n\n\n\n\nOnce loaded you can also look for things on the page with find. The most simple find assertion looks for a substring of text anywhere on the page. The following two examples are identical assertions.\n\n-\n  visit: \/foo\n  find:\n    - Upcoming Events Calendar\n\n\n-\n  visit: \/foo\n  find:\n    -\n      contains: Upcoming Events Calendar\n\n\nEnsure something does NOT appear on the page like this:\n\n-\n  visit: \/foo\n  find:\n    -\n      not contains: \"[token:123]\"","tags":"","url":"cheatsheet.html"},{"title":"Command Line Runner","text":"Use the --filter parameter combined with a suite name to limit the runner to a single suite. This is faster than editing your runner file.\n\n.\/check_pages runner.php --filter=page_header\n\n\nOr the shorthand\n\n.\/check_pages runner.php -f page_header\n\n\nCombine more than one filter value for an OR selection\n\n.\/check_pages runner.php -f page_header -f rss\n\n\n\n\nTry using the --response to see the response source code as well.\n\n.\/check_pages failing_tests_runner.php --response","tags":"","url":"cli.html"},{"title":"Ignore Suites","text":"Config items take this form suite or group\/suite.","tags":"","url":"config--suites_to_ignore.html"},{"title":"Dates","text":"The YAML parser will convert unquoted strings which look like a date or a date-time into a Unix timestamp. To avoid this you must quote your dates as shown below.\n\n-\n  my_custom_mixin:\n    -\n      d: '2023-03-09'\n      cd: 8\n      or: 100\n      cf: soft\n\n\nlearn more","tags":"","url":"dates.html"},{"title":"How To Use A Custom Directory For Suite Files","text":"You may locate suite files in directories other than the main one, by registering those directories with the add_directory() function. After that run_suite() will also look for suite names in the added directory(ies).\n\n&lt;?php\n\/**\n * @file\n * Assert URLs as an anonymous user.\n *\/\nload_config('config\/dev.yml');\nadd_directory(realpath(__DIR__ . '\/..\/web\/themes\/custom\/gop_theme\/components\/smodal'));\n\nrun_suite('*');\n\n\/\/ Glob doesn't yet work with add_directory(), so you have to list the suite\n\/\/ explicitly like this:\nrun_suite('smodal');","tags":"","url":"deep--custom_dirs.html"},{"title":"Setup Before Test","text":"Some integration testing requires that an environment exist in a given state before the tests can run. How can you ensure that the website is in that state before your test suite begins?\n\n\n\nIn this strategy, you setup an endpoint that receives an ID representing a state. You then write server-side code to put your website into that state when it receives a request. How you write the server-side is up to you, and depends on the language, framework, etc. All you do on the Check Pages side of things is make a request to that appropriate endpoint at the beginning of your suite:\n\n# file: suite.yml\n-\n  visit: \/test-set-state.php?state=foo\n  ...","tags":"","url":"deep--setup.html"},{"title":"Variables","text":"The user ID of the authenticated user is available to your suite as ${id}.\nYou can capture the value of h1 into a variable as ${title} and used in a subsequent test.\nWith javascript you can read the url into ${url} and assert against it.\n\n\nAll of these are examples of variables.\n\n\n\nYou create variables like this:\n\n-\n  set: title\n  value: 'Lorem Ipsum'\n\n\nWhich can be used like this:\n\n-\n  set: title\n  value: 'Lorem Ipsum'\n-\n  visit: \/foo.html\n  find:\n    -\n      dom: h1\n      is: ${title}\n\n\nNote: Interpolation will only occur if the variable exists. That means that in the following example, the second assert will assert against the literal value ${other}.\n\n-\n  set: title\n  value: 'Lorem Ipsum'\n-\n  visit: \/foo.html\n  find:\n    -\n      dom: h1\n      is: ${title}\n    -\n      dom: h2\n      is: ${other}\n\n\n\n\nIn this example we'll GET a resource ID and store it using set, then DELETE it in a subsequent test using interpolation.\n\n-\n  visit: \/api\/2\/foo\n  find:\n    -\n      node: collection.items.data.0.id\n      set: fooId\n\n-\n  url: \/api\/2\/foo\/${fooId}\n  request:\n    method: delete\n  expect: 204\n\n\n\n\nVariables used this way are scoped to the suite. They can be shared across tests and assertions, but not across suites.\n\n\n\nThe authentication plugin will create ${user.uid}, however it will be overwritten on the next authentication. To capture and reassign to a different variable name do like the following:\n\n-\n  why: Capture UID from session for reassignment\n  user: foo_user\n  visit: \/\n\n-\n  why: Reassign to authenticated user ID to variable fooUserId\n  set: fooUserId\n  value: ${user.uid}\n\n-\n  why: Assert the title of Foo's user page is correct.\n  visit: \/user\/${fooUserId}\n  find:\n    -\n      dom: h1\n      text: Foo User","tags":"","url":"deep--variables.html"},{"title":"Breakpoint","text":"Provides a means of stopping a suite until a key is pressed. Use this like you would a debugging breakpoint when writing tests if you need to examine server state, for example.\n\nAny key will go on to the next test, however CTRL-C will exit the suite as you might expect.\n\nBreakpoints are only active in debug mode (-vvv), e.g.,\n\n.\/vendor\/bin\/check_pages run tests\/runner.php -vvv\n\n\n\n-\n  why: Demonstrate the Breakpoint plugin syntax.\n  url: \/test_subject.html\n-\n  why: Stop test execution until user presses a key.\n  breakpoint:\n-\n  why: Show the test continues after breakpoint.\n  url: \/test_subject.html\n\n\n\nProvided by the breakpoint plugin.","tags":"","url":"demo--breakpoint.html"},{"title":"Count Plugin","text":"This plugin is unique in that it provides no find schema. It relies on other plugins to add count to their find schemas.\n\nThis uses The Symfony Expression Language under the hood.\n\n\n\n-\n  why: Demonstrate the Count plugin syntax.\n  url: \/test_subject.html\n  find:\n    -\n      dom: h1\n      count: 1\n    -\n      dom: h1\n      count: \"!= 16\"\n    -\n      xpath: \/\/h1\n      count: \"1\"\n    -\n      dom: h1\n      count: \"&lt;2\"\n    -\n      dom: h1\n      count: \"&lt; 2\"\n    -\n      dom: h5\n      count: 0\n    -\n      dom: li\n      count: \"&gt;=5\"\n    -\n      dom: li\n      count: \"&gt;= 5\"\n    -\n      dom: li.emotion\n      count: 2\n    -\n      dom: li\n      text: Fear\n      count: 1\n    -\n      dom: li\n      text: Morning\n      count: 0\n    -\n      dom: '.sidebar a'\n      attribute: href\n      matches: \/^\\\/story\/\n      count: \"&gt;=2\"\n\n-\n  value: 5\n  set: maxItems\n-\n  value: 4\n  set: itemCount\n-\n  why: Demonstrate the Count plugin with interpolation.\n  url: \/test_subject.html\n  find:\n    -\n      dom: h1\n      count: ${maxItems} - ${itemCount}\n\n\n\nProvided by the count plugin.","tags":"","url":"demo--count.html"},{"title":"Cypress","text":"Provides a wrapper around Cypress to incorporate Cypress testing from within Check Pages. Allows passing of Check Pages variables to Cypress for passing of context.\n\n\n\nextras:\n  cypress:\n    cypress: \/Users\/aklump\/Code\/Projects\/ContechServices\/AuroraTimesheet\/site\/app\/node_modules\/.bin\/cypress\n    config_file: \/Users\/aklump\/Code\/Projects\/ContechServices\/AuroraTimesheet\/site\/app\/cypress\/config\/dev.config.js\n    spec_base: \/Users\/aklump\/Code\/Projects\/ContechServices\/AuroraTimesheet\/site\/app\/cypress\/e2e\/\n\n\n\n\n\n-\n  set: timesheet.id\n  value: 240\n-\n  set: timesheet.worker.id\n  value: 160\n-\n  why: Demonstrate the Cypress Plugin syntax.\n  cypress: worker\/3632.cy.js\n  env:\n    user: site_test.worker1\n    visit: node\/${timesheet.id}\/approve\/${timesheet.worker.id}\n\n\n\n\n\n\ndebug output\nupdate title correctly\nimplement https:\/\/docs.cypress.io\/guides\/guides\/command-line#Debugging-commands\n\n\n\n\nProvided by the cypress plugin.","tags":"","url":"demo--cypress.html"},{"title":"Device","text":"Provides the ability to explicitly set some device characteristics for a given test.\n\n\nDevice width\nDevice height\nDevice pixel ratio\n\n\n\n\nA double-precision floating-point value indicating the ratio of the display's resolution in physical pixels to the resolution in CSS pixels. A value of 1 indicates a classic 96 DPI (76 DPI on some platforms) display, while a value of 2 is expected for HiDPI\/Retina displays. Other values may be returned as well in the case of unusually low resolution displays or, more often, when a screen has a higher pixel depth than double the standard resolution of 96 or 76 DPI. Read more...\n\n\n\n-\n  why: Demonstrate setting width and asserting using javascript.\n  url: \/test_subject.html\n  device:\n    width: 480\n  find:\n    -\n      javascript: window.innerWidth\n      is: 480\n\n-\n  why: Assert our plugin automatically sets \"js\" to true even without a JS assertion (by using \"dom\").\n  url: \/test_subject.html\n  device:\n    height: 200\n  find:\n    -\n      dom: .size__height\n      is: 200\n\n-\n  why: Demonstrate setting both dimensions.\n  url: \/test_subject.html\n  device:\n    width: 1280\n    height: 760\n  find:\n    -\n      dom: .size__height\n      is: 760\n    -\n      dom: .size__width\n      is: 1280\n-\n  why: Demonstrate testing against a \"retina\" display\n  url: \/test_subject.html\n  device:\n    pixel ratio: 2\n  find:\n    -\n      dom: .size__pixel-ratio\n      is: 2\n-\n  why: Demonstrate pixel ratio as a float.\n  url: \/test_subject.html\n  device:\n    pixel ratio: 1.5\n  find:\n    -\n      dom: .size__pixel-ratio\n      is: 1.5\n\n\n\n\nProvided by the device plugin.","tags":"","url":"demo--device.html"},{"title":"Demo  Dom","text":"When using is:...\n\n\nEmpty string and null are interchangeable.\nGiven &lt;div&gt;&lt;\/div&gt; the assertion is: null and is: '' and is: are all going to pass.\nAlso, numeric strings and numbers are interchangeable.\n\n\n\n\n-\n  visit: \/test_subject.php\n  find:\n    -\n      dom: nav a\n      attribute: href\n      is: \/page2\n      set: url\n    -\n      eval: '\"\/page2\" == \"${url}\"'\n    -\n      dom: nav a[href=\"${url}\"]\n      text: Page 2\n\n    -\n      why: Make sure no forms appear on the homepage.\n      dom: form\n      count: 0\n\n    -\n      dom: '.block-title'\n      text: Latest Blog Post\n      count: 1\n\n    -\n      dom: '.block-title'\n      text: Not on the Page\n      count: 0\n\n    -\n      dom: '#logo'\n      attribute: title\n      is: An SVG image\n    -\n      why: Find an anchor tag with an href ending in something.\n      dom: a\n      attribute: href\n      matches: \/\\\/bar?\/\n    -\n      dom: p\n      count: \"&gt;= 2\"\n    -\n      dom: p\n      count: \"&lt; 2000\"\n\n    -\n      why: Assertions in the DOM using CSS selectors.\n      dom: '#logo svg'\n      count: 1\n\n    -\n      why: Notice the use or `text` vs. `is` for accessing the contents of a DOM find as either plaintext or markup respectively.\n      dom: h1.page-title\n      text: About In the Loft Studios\n\n    -\n      dom: h1.page-title\n      is: '&lt;span&gt;About In the Loft Studios&lt;\/span&gt;'\n\n    -\n      dom: h1.page-title\n      set: pageTitle\n\n    -\n      dom: h1.page-title\n      is not: '&lt;div&gt;About In the Loft Studios&lt;\/div&gt;'\n\n    -\n      why: Case-insensitive RegEx match against the markup of #footer.\n      dom: '#footer'\n      matches: '\/in the loft studios\/i'\n\n    -\n      why: Showing how to check the hero alt tag two different ways.\n      dom: '[title=\"An SVG image\"]'\n      count: 1\n\n    -\n      dom: '.block-title'\n      text: Quick Start\n\n    -\n      dom: '.block-title'\n      text: Upcoming Events\n\n    -\n      dom: '#footer #copyright'\n      count: 1\n    -\n      why: Capture the timestamp to use in the next assertion.\n      dom: .page-title\n      attribute: data-timestamp\n      matches: \/.+\/\n      set: currentTime\n    -\n      why: Assert the timestamp in the data attribute matches the subtitle; because the value is dynamic and always changing, the only way to assert against it is to use the set property.\n      dom: h2.page-subtitle\n      matches: \/${currentTime}$\/\n    -\n      why: Assert using set with matches, sets the matched value, not the original.\n      dom: .progress\n      matches: \/^\\d+\/\n      set: percentage\n    -\n      dom: .empty-tags .null-or-string\n      is: null\n    -\n      dom: .empty-tags .null-or-string\n      is: ''\n    -\n      dom: .empty-tags .null-or-string\n      is:\n    -\n      dom: .empty-tags .null-or-string\n      is not: 0\n    -\n      dom: .empty-tags .number\n      is not: null\n    -\n      dom: .empty-tags .number\n      is not: ''\n    -\n      dom: .empty-tags .number\n      is: 0\n    -\n      dom: .empty-tags .boolean-true\n      is: 'true'\n    -\n      dom: .empty-tags .boolean-false\n      is: 'false'\n    -\n      why: Ensure not contains works when element does not exist\n      dom: .bogus-non-existent-element\n      not contains: spaghetti\n    -\n      why: Ensure not contains works when element does exist\n      dom: .page-title\n      not contains: spaghetti\n-\n  eval: ${percentage} == 89\n\n\n\nProvided by the dom plugin.","tags":"","url":"demo--dom.html"},{"title":"Evaluate","text":"Allows runtime evaluation such as comparing values captured using set.\n\nhttps:\/\/symfony.com\/doc\/current\/components\/expression_language.html\n\n\n  You may need to wrap some values in quotes, e.g. \"2022-09-07T20:04:04+0000\" &lt; \"2022-09-07T20:04:06+0000\".\n\n\n\n\n# This test also tests to make sure that variables can be reassigned across tests.\n-\n  why: Demonstrate how to assert an image's aspect ratio using `eval`.\n  visit: \/test_subject.html\n  find:\n    -\n      dom: img.tree\n      style: width\n      set: width\n    -\n      dom: img.tree\n      style: height\n      set: height\n    -\n      why: Assert image has a landscape aspect ratio.\n      eval: ${height} &lt; ${width}\n-\n  why: Assert a different image this time.\n  visit: \/test_subject.html\n  find:\n    -\n      dom: img.lake\n      style: width\n      set: width\n    -\n      dom: img.lake\n      style: height\n      set: height\n    -\n      why: Assert image has a tall aspect ratio.\n      eval: ${height} &gt; ${width}\n-\n  why: Demonstrate eval at the test level\n  eval: ${height} &gt; ${width}\n\n\n\n\nProvided by the evaluate plugin.","tags":"","url":"demo--evaluate.html"},{"title":"Testing Forms","text":"The form plugin allows you to test the submission of forms.\n\n\n\nThe submit is a special dom selector in that it uses the form as the root, so you can only select elements inside the form AND you should omit any reference to the form element, as it will be prepended automatically.\n\nYou only need to use this if the form contains more than one input[type=\"submit\"] element.\n\n\n\nTo provide a form value, add an object to the input array as shown below. It must have the keys name and value, where name is thename` attribute of the form element.\n\nDates\n\n\nYou must wrap date strings in quotations like this value: \"2010-01-01\".\n\n\nSelect\n\n\nInstead of using value, you may use option to set the value of a &lt;select&gt; element. It is case-sensitive. Subject to the Element Present limitation.\n\n\n\n\nThe DOM element must be present in the markup and not added via AJAX, if it's not present the value cannot be determined.\n\n\n\nIf the input element is missing the name attribute, strange things may happen.\n\n\n\n-\n  why: An example to load the page and submit the form.\n  url: \/test_subject.php\n  form:\n    dom: .form-a\n  find:\n    -\n      dom: .messages\n      text: Form A Was Submitted\n\n-\n  why: Demonstrate using the \"submit\" to indicate which of several submit buttons.\n  url: \/test_subject.php\n  form:\n    dom: .form-b\n    submit: '.form-save'\n  find:\n    -\n      dom: .messages\n      text: Save Was Used to Submit\n\n-\n  why: Demonstrate using the \"submit\" again, with a different button.\n  url: \/test_subject.php\n  form:\n    dom: .form-b\n    submit: '.form-delete'\n  find:\n    -\n      dom: .messages\n      text: Delete Was Used to Submit\n\n-\n  why: Demonstrate submitting values to the form.\n  url: \/test_subject.php\n  form:\n    dom: .form-b\n    input:\n      -\n        name: message\n        value: A Little Extra Message\n      -\n        why: This is not in the form, but it can still be provided without a test error.\n        name: first_name\n        value: Frank\n  find:\n    -\n      dom: .messages\n      text: A Little Extra Message\n\n-\n  why: Demonstrate submitting values to the form using an import.\n  url: \/test_subject.php\n  form:\n    dom: .form-b\n    input:\n      -\n        import: imports\/form_data\n    find:\n      -\n        dom: .messages\n        text: A Little Extra Message\n\n-\n  why: Demonstrate a form that has an action to another URL.\n  url: \/test_subject.php\n  form:\n    dom: .form-c\n    input:\n      -\n        name: first_name\n        value: Rachel\n      -\n        name: date\n        value: \"2010-01-01\"\n  find:\n    -\n      dom: h1\n      text: Thank you Rachel, for your submission\n    -\n      dom: h2\n      text: Your membership will begin on 2010-01-01.\n-\n  set: savedFirstName\n  value: Anne\n-\n  set: savedDate\n  value: \"1982-06-30\"\n-\n  why: Assert interpolation works for input values.\n  url: \/test_subject.php\n  form:\n    dom: .form-c\n    input:\n      -\n        name: first_name\n        value: ${savedFirstName}\n      -\n        name: date\n        value: \"${savedDate}\"\n      -\n        name: shirt_size\n        option: small\n  find:\n    -\n      dom: h1\n      text: Thank you Anne, for your submission\n    -\n      dom: h2\n      text: Your membership will begin on 1982-06-30.\n    -\n      dom: p\n      text: Your shirt size is sm.\n\n-\n  why: Demonstrate textfield default value is submitted.\n  url: \/test_subject.php\n  form:\n    dom: .drupal-form\n  find:\n    -\n      dom: .messages\n      is: $5.99\n\n-\n  why: Demonstrate how a Drupal form can be submitted w\/hidden fields.\n  url: \/test_subject.php\n  form:\n    dom: .drupal-form\n    input:\n      -\n        name: field_amount[0][value]\n        value: $19.99\n\n    # This is optional, but may help with readability.\n    submit: '#edit-submit'\n\n  find:\n    -\n      why: Assert the new value $19.99 is received by the form handler.\n      dom: .messages\n      is: $19.99\n\n\n\nProvided by the form plugin.","tags":"","url":"demo--form.html"},{"title":"Testing Response Headers","text":"You can assert against response headers like this:\n\n-\n  visit: \/foo\n  find:\n    -\n      header: content-type\n      contains: text\/html \n\n\n\nheader is NOT case-sensitive.\nBut contains is, so... if you're trying to match a header value with case-insensitivity, you should use the match key, with the i flag like this:\n\n- header: content-type\n  matches: \/text\\\/html\/i\n\n\n\n\n\n-\n  visit: \/test_subject.php\n  find:\n    -\n      header: foo\n      set: fooHeader\n    -\n      header: foo\n      is not: pha\n    -\n      header: foo\n      contains: pha\n    -\n      header: foo\n      is: alpha\n    -\n      header: bar\n      is: BRAVO\n    -\n      header: bar\n      matches: \/^bravo$\/i\n    -\n      header: bar\n      not matches: \/^charlie$\/i\n    -\n      why: This header should not even exist, testing that case.\n      header: zulu\n      not matches: \/^charlie$\/i\n    -\n      header: baz\n      count: 0\n    -\n      header: content-type\n      count: 1\n\n\n\nProvided by the header plugin.","tags":"","url":"demo--header.html"},{"title":"Imports (Code Reuse with Partials)","text":"# file: suite.yml\n\n# Here is an example of a test import\n-\n  import: imports\/headings\n\n# Here is an example of an assertion import\n-\n  visit: \/foo.html\n  find:\n    -\n      import: imports\/find\/sections\n\n\n\n  Imports can only be configured via interpolation (see below). Other configurable options for reusable code to consider are: shorthand, options or plugins.\n\n\n\n\nThe concept of imports is not new. Write a partial and include it in other files. You can do this too with Check Pages.\n\nIf you write five suites and realize that you repeat the same tests in several, this is a time to consider an import. It creates coupling and dependency, so it may or may not be a good idea.\n\nWhat used to look like this, repeated in several suites:\n\n# files: suite.yml, suite2.yml, suite3.yml, ...\n\n-\n  visit: \/\n  find:\n    -\n      dom: h1\n      set: title\n-\n  visit: \/contact\n  find:\n    -\n      dom: h1\n      set: contactTitle\n-\n  visit: ...\n\n\nCan be moved to a file called imports\/_headings.yml and those repeated sections in your suite files can be replaced with an import, like this:\n\n# files: suite.yml, suite2.yml, suite3.yml, ...\n\n-\n  import: imports\/headings\n-\n  visit: ...\n\n\n\n\n\nWhere you save import files is up to you, imports directory is given as an example. The value of import must be a resolvable path.\nThe leading underscore is optional, and like SASS partials it is ignored by the parser. You may use it or not, that is to say &#95;headings.yml and headings.yml are seen as the same import file.\nThe extension is optional and when excluded, is assumed as .yml.\nA single import line in your test (one YAML array element) maps to one or many tests in the import file. That is to say, a single import can include one test, or several tests.\nIf you use why as a sibling to import, that is only for your test reading, it will not be printed when the test is run. So think of it as answering the question of \"Why use this import?\", if you use it.\nYou may use an import to substitute tests or assertions; see the examples below.\nIt's good practice to put your find imports in a subfolder find as it's easier to reason about.\nImports cannot recursively import other imports at this time.\n\n\n\n\n# file: suite.yml\n-\n  why: Set `id` which is used in our import file to build the URL.\n  set: baz\n  is: 123\n\n-\n  import: imports\/setup_timesheet\n\n\n# file: imports\/_setup_timesheet.yml\n-\n  url: \/foo\/bar\/${baz}\n\n\n\n\nUse this pattern in other plugins to implement imports.\n\n$importer = new \\AKlump\\CheckPages\\Plugin\\Importer($test-&gt;getRunner());\n$importer-&gt;resolveImports($config['form']['input']);\n\n\nIn this example the form plugin allows the usage of imports, e.g.,\n\n-\n  url: \/form.html\n  form:\n    dom: form\n    input:\n      -\n        import: imports\/form_data\n\n\n\n\n-\n  why: Create a variable to ensure import interpolation is handled correctly.\n  value: Imports\n  set: headingControlValue\n-\n  import: imports\/headings\n  why: Test the basic syntax of an import.\n-\n  import: imports\/_headings\n  why: Assert underscore and no extension works.\n-\n  import: imports\/links.yml\n  why: Assert extension behaves.\n-\n  import: imports\/_links.yml\n  why: Verify the underscore works.\n-\n  visit: \/test_subject.html\n  find:\n    -\n      why: Assert button is present\n      dom: button\n      text: alpha\n    -\n      why: Assert button is present using xpath\n      xpath: \/\/button\n      count: 1\n    -\n      why: Repeat the above using an assertion import.\n      import: imports\/find\/button\n    -\n      why: Repeat the above using an assertion import a second time\n      import: imports\/find\/title\n    -\n      value: alpha\n      set: control.alpha\n-\n  why: Test import interpolation when value is set as assertion in earlier test.\n  import: imports\/interpolate\n\n\n\nProvided by the import plugin.","tags":"","url":"demo--import.html"},{"title":"Testing with Javascript","text":"You can use javascript in your tests to capture things like the window location or query string. The test is run inside of Chrome devtools so the full javascript console is available.\n\n\n\n-\n  visit: \/node\/25029\n  find:\n    -\n      javascript: location.pathname.split('\/')[2]\n      set: nid\n\n-\n  visit: \/print\/node\/{nid}\n\n\n\n\n-\n  visit: \/\n  find:\n    -\n      javascript: location.hash\n      matches: \/^#foo=bar&amp;alpha=bravo$\/\n\n\n\n\n-\n  why: Assert javascript is run after the redirect.\n  visit: \/test_subject.php?redirect\n  expect: 302\n  find:\n    -\n      javascript: location.search\n      is: ?redirected\n\n-\n  visit: \/test_subject.php\n  js: true\n  find:\n    -\n      why: Test we can eval JS without asserting anything.\n      javascript: document.querySelector('body').classList.add('foo')\n    -\n      why: This content is generated by JS in test_subject.php.  It will only be there if the test is run with JS turned on.\n      dom: h1\n      text: COVID 19 Pandemic\n    -\n      why: Assert we can set the results of a javascript evaluation.\n      javascript: location.pathname\n      set: path\n\n-\n  why: This example shows how to check the window location hash by using the javascript selector.  It also checks that js is set to true automatically.\n  visit: \/test_subject.php\n  find:\n    -\n      javascript: location.hash\n      matches: \/^#foo=bar&amp;alpha=bravo$\/\n    -\n      javascript: location.hash\n      is: '#foo=bar&amp;alpha=bravo'\n    -\n      javascript: location.hash\n      is not: '#foo=bar&amp;alpha=bravo&amp;charlie=delta'\n    -\n      javascript: location.query\n      is: \"\"\n\n-\n  why: Demonstrate how the request will wait for elements to load via AJAX.\n  js: true\n  visit: \/test_subject.php\n  request:\n    timeout: 4\n  find:\n    -\n      dom: '.ajax-content li'\n      count: 3\n\n\n\nProvided by the javascript plugin.","tags":"","url":"demo--javascript.html"},{"title":"More Javascript","text":"Your testing machine must have Chrome installed.\n\n\n\n\nTo support JS testing, you must indicate where your Chrome binary is located in\nyour runner configuration file, like so:\n\nchrome: \/Applications\/Google Chrome.app\/Contents\/MacOS\/Google Chrome\n\n\n\n\nUnless you enable it, or in the case the selector type (i.e., style\n, javascript) requires it, javascript is not run during testing. If you need\nto assert that an element exists, which was created from Javascript (or\notherwise need javascript to run on the page), you will need to indicate the\nfollowing in your test, namely js: true.\n\n-\n  visit: \/foo\n  js: true\n  find:\n    -\n      dom: .js-created-page-title\n      text: Javascript added me to the DOM!\n\n\n\n\nLet's say you want to assert the value of the URL fragment. You can do that with\nthe javascript selector. The value of javascript should be the expression to\nevaluate, once the page loads. Notice that you may omit the js: true as it\nwill be set automatically.\n\n-\n  visit: \/foo\n  find:\n    -\n      javascript: location.hash\n      is: \"#top\"\n\n\n\n\n\nChrome DevTools Protocol 1.3\nLearn more\nCLI parameters\nMore on parameters\nhttps:\/\/github.com\/GoogleChrome\/chrome-launcher\nhttps:\/\/peter.sh\/experiments\/chromium-command-line-switches\/\nhttps:\/\/raw.githubusercontent.com\/GoogleChrome\/chrome-launcher\/v0.8.0\/scripts\/download-chrome.sh","tags":"","url":"demo--javascript2.html"},{"title":"JSON Pointer","text":"Implements JSON Pointer to be able to extract data from JSON responses.\n\nFeatures:\n\n\nWill only work on valid JSON responses. A valid response is one that explicitly has content-type: application\/json whose body can be parsed as JSON without error.\n\n\n\n\n\nhttps:\/\/packagist.org\/packages\/php-jsonpointer\/php-jsonpointer\n\n\n\n\n-\n  why: Demonstrate the Json Plugin syntax.\n  url: \/test_subject.php?q=json_pointer__luke.json\n  find:\n    -\n      pointer: \/height\n      is: 172\n    -\n      pointer: \/hair_color\n      set: hairColor\n    -\n      pointer: \/skin_color\n      contains: air\n    -\n      pointer: \/mass\n      not contains: 6\n    -\n      pointer: \/hair_color\n      is: ${hairColor}\n    -\n      pointer: \/height\n      is not: 200\n    -\n      pointer: \/homeworld\n      matches: \/^https:\/\n    -\n      pointer: \/homeworld\n      not matches: \/^https:\\\/\\\/swapi\\.dev\\\/api\\\/films\\\/\/\n    -\n      pointer: \/films\n      count: 4\n\n-\n  why: Demonstrate the Json Plugin syntax with nested data.\n  url: \/test_subject.php?q=json_pointer__nested.json\n  find:\n    -\n      pointer: \/data\/0\/categories\/0\/CategoryID\n      is: 1\n    -\n      pointer: \/messages\n      count: 0\n\n\n\nProvided by the json_pointer plugin.","tags":"","url":"demo--json_pointer.html"},{"title":"Testing APIs with JSON Schema","text":"You can test APIs using JSON Schema, here's the basic idea...\n\n.\n\u251c\u2500\u2500 runner.php\n\u251c\u2500\u2500 json_schema\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 object.json\n\u2514\u2500\u2500 suite.yml\n\n\n\nCreate a JSON file with the JSON schema and save it somewhere, e.g. schemas\/object.json.\n\n# file: object.json\n\n\n{\n    \"type\": \"object\"\n}\n\nThen write a test to use that schema:\n\n# file: suite.yml\n-\n  visit: \/api\/2\/thing\/99\n  find:\n    -\n      schema: json_schema\/object.json\n    -\n      schema: json_schema\/array.json\n      matches: false\n\nmatches may also be false; it may be omitted and defaults to true.\nNotice the usage of a second schema to use as a NOT match, in this case schemas\/array.json.\nThe content-type header will be used to decode the response body.\nschema should be resolvable filepath, or a JSON string representing a schema.\n\n\n\n\nYou may also apply a schema on just part of the reponse data using the path modifier.\n\n\nGiven the following response:\n\n{\n  \"lorem\": {\n       \"ipsum\": [\n           {\n               \"dolar\": true\n           }\n       ]\n   }\n}\n\nYou can apply a schema to the array at ipsum. Provide the schema subject using dot notation as path, in this case lorem.ipsum. Also notice that schema can be a JSON string, and doesn't have to reference a filepath.\n\n# file: suite.yml\n-\n visit: \/api\/2\/thing\/99\n find:\n   -\n     schema: '{\"type\":\"array\"}'\n     path: lorem.ipsum\n\n\n\n\n\n\nlearn more\n\n\nHere's now to write a schema that references another file.\n\nThe file that provides the $defs is called (in the case and arbitrary) shared.json:\n\n{\n  \"$defs\": {\n    \"date\": {\n      \"type\": \"string\",\n      \"pattern\": \"^\\\\d{4}\\\\-\\\\d{2}\\\\-\\\\d{2}[ T]\\\\d{2}:\\\\d{2}:\\\\d{2}$\"\n    }\n  }\n}\n\n\nHere is the file that references the date property. Two examples are given, which are effectively identical. You cannot use file: prefix as shown online in some examples.\n\n{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"date\": {\n        \"$ref\": \".\/shared.json#\/$defs\/date\"\n      },\n      \"date\": {\n        \"$ref\": \"shared.json#\/$defs\/date\"\n      }\n    }\n  }\n}\n\n\n\n\n-\n  why: Demo how document.json can use $ref and $def.\n  url: \/test_subject.json\n  find:\n    -\n      schema: schemas\/document.json\n-\n  url: \/test_subject.json\n  find:\n    -\n      schema: schemas\/is_object.json\n    -\n      schema: schemas\/is_array.json\n      matches: false\n\n-\n  url: \/test_subject.json\n  find:\n    -\n      schema: schemas\/is_array.json\n      path: lorem.ipsum\n-\n  url: \/test_subject.json\n  find:\n    -\n      schema: '{\"type\":\"array\"}'\n      path: lorem.ipsum\n-\n  url: \/test_subject.json\n  find:\n    -\n      schema: schemas\/is_object.json\n      matches: true\n    -\n      schema: schemas\/is_foo.json\n      matches: true\n    -\n      schema: schemas\/is_array.json\n      matches: false\n\n\n\nProvided by the json_schema plugin.","tags":"","url":"demo--json_schema.html"},{"title":"Loops","text":"The following loop variables are available. They are only available to be interpolated in tests within the loop.\n\nArrays\n\n\nloop.length int The number of iterations.\nloop.last boolean true If the last item in the loop.\nloop.index int 1-based index\nloop.index0 int 0-based index\nloop.value mixed Current value\n\n\nMaps\/Objects\n\n\nloop.length\nloop.last\nloop.property\nloop.value\n\n\n\n\n-\n  loop: 4x\n\n-\n  why: $loop[${loop.index}] = ${loop.value}\n  set: value${loop.index}\n  value: ${loop.value}\n\n-\n  end loop:\n\n-\n  loop: 2...4\n\n-\n  why: $loop[${loop.index}] = ${loop.value}\n  visit: \/test_subject.html\n  find:\n    -\n      dom: h${loop.value}\n      count: ${loop.index}\n\n-\n  end loop:\n\n-\n  loop:\n    h2: Lorem\n    h3: Ipsum\n    h4: Dolar\n-\n  why: $loop.${loop.property} = ${loop.value}\n  visit: \/test_subject.html\n  find:\n    -\n      dom: ${loop.property}\n      text: ${loop.value}\n\n-\n  end loop:\n\n-\n  loop:\n    - blockquote\n    - p\n    - span\n-\n  why: Demonstrate loop array interpolation ($loop[${loop.index}] = ${loop.value})\n  visit: \/test_subject.html\n  find:\n    -\n      dom: ${loop.value}\n      count: ${loop.index0}\n\n-\n  end loop:\n\n-\n  loop:\n    - [ 200, Welcome to the Loop Page ]\n    - [ 200, Lorem ]\n\n-\n  why: 'Demonstrate loop array w\/arrays interpolation #${loop.index}.'\n  visit: \/test_subject.html\n  expect: ${loop.value[0]}\n  find:\n    -\n      why: Assert the page title is correct (using dot syntax).\n      dom: h${loop.index}\n      text: ${loop.value.1}\n\n-\n  end loop:\n\n-\n  loop:\n    -\n      code: 200\n      title: Welcome to the Loop Page\n    -\n      code: 200\n      title: Lorem\n\n-\n  why: 'Demonstrate loop array w\/objects interpolation #${loop.index}.'\n  visit: \/test_subject.html\n  expect: ${loop.value.code}\n  find:\n    -\n      why: Assert the page title is correct.\n      dom: h${loop.index}\n      text: ${loop.value.title}\n\n-\n  end loop:\n\n\n\nProvided by the loop plugin.","tags":"","url":"demo--loop.html"},{"title":"The Path Plugin is for Testing Structured Content","text":"You can also use the json_pointer plugin for JSON responses only.\n\n{\n    \"foo\": {\n        \"bar\": \"baz\"\n    }\n}\n\n\n- visit: \/api\/thing.json\n  find:\n    - path: foo.bar\n      is: baz\n\n\n\n\nThe plugin is able to access the values from JSON, XML and YAML responses. It uses the Content-type header to deserialize the request body. Given any of the following...\n\nContent-type: application\/json\n\n{\"foo\":{\"bar\":\"baz\"}}\n\n\nContent-type: application\/xml\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;foo&gt;\n  &lt;bar&gt;baz&lt;\/bar&gt;\n&lt;\/foo&gt;\n\n\nContent-type: application\/x-yaml\n\nfoo:\n  bar: baz\n\n\n... the following test could be used.\n\n- visit: \/api\/thing\n  find:\n    - path: foo\n      count: 1\n    - path: foo.bar\n      is: baz\n    - path: foo.bar\n      is not: yaz\n    - path: foo.bar\n      contains: az\n    - path: foo.bar\n      not contains: alpha\n    - path: foo.bar\n      matches: \/^baz$\/\n    - path: foo.bar\n      not matches: \/\\d+\/\n\n\n\n\nrequest can be used to send headers, as in this case where we pass accept. Notice how we ensure the response is encoded as JSON by the first assertion.\n\n- visit: \/api\/thing\n  request:\n  headers:\n    accept: application\/json\n  find:\n    - why: Assert accept header used by the server to serialize the request.\n      contains: '{\"bar\":\"baz\"}'\n    - path: foo.bar\n      is: baz\n\n\n\n\nYou can use contains and count against arrays.\n\nGiven this response:\n\nContent-type: text\/yml\n\nitems:\n  - apple\n  - banana\n  - chocolate\ntitle: Foods\n\n\n... this test can be used.\n\n- visit: \/api\/thing\n  request:\n    headers:\n      accept: text\/yaml\n  find:\n    - path: items\n      count: 3\n    - path: items\n      count: \"&gt;1\"\n    - path: items\n      contains: chocolate\n    - path: items\n      not contains: lettuce\n    - path: items.1\n      is: banana\n\n\nTo select the root node use an empty string for path...\n\n- visit: \/api\/thing\n  request:\n    headers:\n      accept: text\/yaml\n  find:\n    - path: \"\"\n      count: 2\n\n\n\n\nIt can be handy to store the value for use in a subsequent test.\n\n- visit: \/api\/thing.json\n  find:\n    - path: foo.bar\n      is: baz\n      set: fooBar\n\n- visit: \/api\/thing.xml\n  find:\n    - why: Assert both JSON and XML ship the same value.\n      path: foo.bar\n      is: ${fooBar}\n\n\n\n\n-\n  why: Assert we can count the root data.\n  visit: \/test_subject.php?op=root\n  find:\n    -\n      why: Using an empty string, may be more intuitive for some.\n      path: \"\"\n      count: 5\n\n-\n  why: Assert we can store the ID of a REST response resource to use later\n  visit: \/test_subject.php?op=rest\n  find:\n    -\n      path: 0\n      count: 1\n    -\n      path: 0.id\n      is: 144\n      set: resourceId\n    -\n      path: 0.title\n      set: resourceTitle\n\n-\n  why: Assert we can delete the resource by ID stored in previous test.\n  visit: \/test_subject.php?op=rest&amp;id=${resourceId}\n  request:\n    method: delete\n  expect: 204\n\n-\n  visit: \/test_subject.php?op=items\n  request:\n    method: get\n    headers:\n      accept: text\/yaml\n  find:\n    -\n      path: items\n      count: 5\n    -\n      path: items\n      count: \"&gt;1\"\n    -\n      path: items\n      contains: apple\n    -\n      path: items\n      not contains: fish\n    -\n      path: items.1\n      is: banana\n    -\n      why: Use count 0 to detect non-existent index.\n      path: items.99\n      count: 0\n\n-\n  visit: \/test_subject.php\n  request:\n    method: GET\n    headers:\n      accept: application\/json\n  find:\n    -\n      why: Assert accept header is applied by matching JSON.\n      contains: '{\"bar\":\"baz\"}'\n    -\n      path: foo\n      count: 1\n    -\n      path: foo.bar\n      is: baz\n    -\n      path: foo.bar\n      is not: yaz\n    -\n      path: foo.bar\n      contains: az\n    -\n      path: foo.bar\n      not contains: alpha\n    -\n      path: foo.bar\n      matches: \/^baz$\/\n    -\n      path: foo.bar\n      not matches: \/\\d+\/\n-\n  visit: \/test_subject.php\n  request:\n    method: GET\n    headers:\n      accept: application\/json\n  find:\n    - '{\"bar\":\"baz\"}'\n    -\n      path: foo.bar\n      is: baz\n\n-\n  visit: \/test_subject.php\n  request:\n    method: GET\n    headers:\n      accept: application\/xml\n  find:\n    - '&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;'\n    -\n      path: foo.bar\n      is: baz\n\n-\n  visit: \/test_subject.php\n  request:\n    method: GET\n    headers:\n      accept: text\/yaml\n  find:\n    - 'bar: baz'\n    -\n      path: foo.bar\n      is: baz\n\n\n\n\nProvided by the path plugin.","tags":"","url":"demo--path.html"},{"title":"Making Requests Other Than GET","text":"When the body is not a scalar or null, it will be encoded based on the content type. The assumed content type is application\/octet-stream\n\n\n\nUse methods to request against the same endpoint using the same configuration, varying on method. This can be handly for testing REST APIs against 403 responses.\n\nNotice how you can use ${request.method} to interpolate.\n\n\n\nYou can set a custom timeout for this test only, which overrides request_timeout from the runner configuration.\n\n-\n  why: Demonstrate custom request timeout for this test only.\n  visit: \/test_subject.php\n  request:\n    timeout: 33\n\n\n\n\n-\n  why: Demonstrate custom request timeout for this test only.\n  visit: \/test_subject.php\n  request:\n    timeout: 120\n\n-\n  why: Assert ${request.method} returns 405\n  visit: \/test_subject.php\n  request:\n    methods: [ PATCH, DELETE, HEAD, OPTIONS, TRACE ]\n  expect: 405\n\n-\n  why: Assert request body interpolation is working as expected.\n  value: bar\n  set: fooValue\n\n-\n  why: Assert post with content-type header and body works as expected.\n  visit: \/test_subject.php\n  request:\n    method: post\n    headers:\n      content-type: application\/json\n    body: '{\"foo\":\"${fooValue}\"}'\n  find:\n    - 'POST'\n    - 'content-type: application\/json'\n    - '{\"foo\":\"bar\"}'\n\n-\n  why: Assert post encodes body object correctly.\n  visit: \/test_subject.php\n  request:\n    method: post\n    headers:\n      content-type: application\/json\n    body:\n      foo: bar\n  find:\n    - 'POST'\n    - 'content-type: application\/json'\n    - '{\"foo\":\"bar\"}'\n\n-\n  visit: \/test_subject.php\n  request:\n    method: GET\n    body: 'lorem ipsum'\n  find:\n    - 'GET'\n    - 'lorem ipsum'\n\n-\n  why: Assert put with multiple headers and body works as expected.\n  visit: \/test_subject.php\n  request:\n    method: PUT\n    headers:\n      content-type: application\/x-www-form-urlencoded\n      accept: application\/json, application\/xml\n    body: 'foo=bar&amp;do=re'\n  find:\n    - 'PUT'\n    - \"content-type: application\/x-www-form-urlencoded\"\n    - \"accept: application\/json, application\/xml\"\n    - 'foo=bar&amp;do=re'\n\n-\n  why: This will print a debug message in debug mode about un-interpolation.\n  visit: \/test_subject.php\n  request:\n    method: GET\n    body: 'lorem ${missingVar}'\n\n\n\nProvided by the request plugin.","tags":"","url":"demo--request.html"},{"title":"Sleep: Adding a Delay","text":"sleep: &lt;seconds&gt; provides a means of adding a delay to the test runner.\n\n\n\n-\n  visit: \/test_subject.php\n  find:\n    -\n      header: X-timestamp\n      set: time\n\n-\n  why: Wait three seconds to ensure REQUEST_TIME increases.\n  sleep: 3\n\n-\n  visit: \/test_subject.php\n  find:\n    -\n      header: X-timestamp\n      set: time2\n    -\n      eval: ${time2} &gt;= ${time} + 3\n\n\n\nProvided by the sleep plugin.","tags":"","url":"demo--sleep.html"},{"title":"Style Plugin: Assertions Against CSS","text":"This example checks the CSS for both display and opacity properties to determine if the modal is visible based on CSS.\n\nfind:\n  -\n    dom: .modal\n    count: 1\n  -\n    dom: .modal\n    style: display\n    matches: \/^(?!none).+$\/\n  -\n    dom: .modal\n    style: opacity\n    is: 1\n\n\n\n\n-\n  visit: \/test_subject.html\n  js: true\n  find:\n    -\n      dom: .visible\n      style: display\n      matches: \/^(?!none).+$\/\n      set: display\n    -\n      dom: .visible\n      style: display\n      not matches: \/^block$\/\n      set: display\n    -\n      dom: .visible\n      style: display\n      contains: inline\n    -\n      dom: .visible\n      style: display\n      not contains: flex\n    -\n      dom: .hidden-by-style\n      style: display\n      is: none\n    -\n      dom: .hidden-by-style\n      style: display\n      is not: hidden\n    -\n      dom: .hidden-by-class\n      style: display\n      is: none\n\n\n\n\nProvided by the style plugin.","tags":"","url":"demo--style.html"},{"title":"Value Plugin","text":"Set variables from constant\/interpolated values.\nAssert against constant\/interpolated values.\nWorks outside of HTTP requests.\n\n\nThe real benefit of this plugin comes when you use shorthand, mixins, or plugins to set variables in realtime, as it allows to you to assert against those dynamic values.\n\n\n\n-\n  why: Demonstrate the Value Plugin syntax using \"why\".\n  value: lorem ipsum dolar\n  set: vars.string\n-\n  value: ${vars.string}\n  is: lorem ipsum dolar\n-\n  value: ${vars.string}\n  is not: foo bar\n-\n  value: ${vars.string}\n  contains: ipsum\n-\n  value: ${vars.string}\n  not contains: alpha\n-\n  value: ${vars.string}\n  matches: \/^lorem\/\n-\n  value: ${vars.string}\n  not matches: \/\\d{3}\/\n-\n  value: 123\n  set: vars.number\n-\n  value: ${vars.number}\n  is: 123\n-\n  value: ${vars.number}\n  contains: 23\n-\n  value: ${vars.number}\n  matches: \/\\d{3}\/\n\n-\n  url: \/test_subject.html\n  find:\n    -\n      why: Assert we can perform an assertion \"set\".\n      value: Twilight\n      set: control\n    -\n      why: Assert we can interpolate on \"value\".\n      value: ${control}\n      set: control2\n\n-\n  why: Assert set values persist to the next test.\n  url: \/test_subject.html\n  find:\n    -\n      dom: h1\n      is: ${control}\n    -\n      dom: h1\n      is: ${control2}\n\n\n\nProvided by the value plugin.","tags":"","url":"demo--value.html"},{"title":"Demo  Xpath","text":"To easily get the xpath of an element in Chrome. Click the element, right click Inspect. Then in the DevTools, right click the HTML element, then Copy > Copy xpath.\n\n\n\n-\n  visit: \/test_subject.html\n  find:\n    -\n      why: XPath can also be used to locate things, so if you want to be sure that the third .block-title is a given value, you should use xpath.\n      xpath: '(\/\/*[contains(@class, \"block-title\")])[3]'\n      text: Latest Blog Post\n    -\n      xpath: '(\/\/*[contains(@class, \"block-title\")])[3]'\n      is: Latest Blog Post\n    -\n      xpath: '(\/\/*[contains(@class, \"block-title\")])[3]'\n      is not: Blog Post\n    -\n      xpath: '(\/\/*[contains(@class, \"block-title\")])[3]'\n      contains: Blog Post\n    -\n      xpath: '(\/\/*[contains(@class, \"block-title\")])[3]'\n      matches: \/blog post\/i\n\n\n\n\n\nProvided by the xpath plugin.","tags":"","url":"demo--xpath.html"},{"title":"Developers Note: User Messages","text":"When working on this project, never echo directly.\n\n\n\nFor messages related to a test, you must use $test-&gt;addMessage(... because the timing of the output will be handled by the runner. You must not use a printer from within plugins or custom extensions!\n\nIn some cases you may want to display your messages sooner than later, if so you may call $test-&gt;echoMessages(). Not this will print all test messages, including those set so far in the processing. This ensures FIFO.\n\nFor output initiated from inside non-test event handlers, you may use $runner-&gt;echo() for real time printing.\n\n\n\nFollow the code as shown below for user feedback. The instance of \\AKlump\\Messaging\\MessengerInterface will determine how the messages are printed, you just worry about the message, level, and verbosity as you write code.\n\n\/\/ INFO MESSAGE\n$printer-&gt;deliver(new Message(\n  [\n    'This is a two-line\",\n    \"info message.',\n  ],\n));\n\n\/\/ NOTICE MESSAGE\n$printer-&gt;deliver(new Message(\n  [\n    'This is an notice.',\n    '',\n  ],\n  \\AKlump\\Messaging\\MessageType::SUCCESS,\n));\n\n\/\/ ERROR MESSAGE\n$printer-&gt;deliver(new Message(\n  [\n    'This is an error message with an extra line break.',\n    '',\n  ],\n  \\AKlump\\Messaging\\MessageType::ERROR,\n));\n\n\n\/\/ VERBOSE, INFO\n$printer-&gt;deliver(new Message(\n  [\n    'This is a debug message that will show with (A)ny verbosity.',\n  ],\n  \\AKlump\\Messaging\\MessageType::DEBUG,\n  new \\AKlump\\CheckPages\\Output\\VerboseDirective('D')\n));\n\n\/\/ or it's shorthand...\n$printer-&gt;deliver(new \\AKlump\\CheckPages\\Output\\DebugMessage(\n  [\n     'Demo debug message',\n     '',\n    'This is a debug message that will show with (A)ny verbosity.',\n  ],\n));\n\n\nYou will need an instance of \\AKlump\\Messaging\\MessengerInterface, e.g.,\n\n$printer = new \\AKlump\\CheckPages\\Output\\ConsoleEchoPrinter($runner-&gt;getOutput());","tags":"","url":"dev--output.html"},{"title":"Options: Configurable Abstraction","text":"@todo This needs to be rethought, now that we have shorthand.\n\n\n\n# file: suite.yml\n-\n  my_custom_option: 123\n\n\n\n  Options are a step up from imports because they allow you to consolidate reusable code, while offering configuration via arguments, like a function. They are \"options with arguments\".\n\n\n\n\nIf you need to do some fancy PHP transformations at certain points of test execution, you can hook into that flow using one or more custom test options.  These are nothing more than functions attached to events. In the following example, foo is the custom test option under study.\n\n# file: suite.yml\n-\n  visit: \/index.html\n  foo: 123\n  find:\n    -\n      dom: h1\n      is: Hello World!\n\n\nThe add_test_option() function allows you to add customization at the level of your runner file.\n\n# file: runner.php\nadd_test_option('foo', [\n  'onBeforeTest' =&gt; function ($option, \\AKlump\\CheckPages\\Parts\\Test $test, $context){\n    \/\/ Note, $option === 123\n  },\n]);\n\n\nThe first argument defines the option as it will be used in the suite file, e.g., foo. The second argument is an array of callbacks, keyed by one or more of these methods:\n\n\nonLoadSuite(SuiteEventInterface $event, array $context)\nonBeforeTest($option, TestEventInterface $event, array $context)\nonBeforeDriver($option, TestEventInterface $event, array $context)\nonBeforeRequest($option, DriverEventInterface $event, array $context)\nonBeforeAssert($option, AssertEventInterface $event, array $context)\nonAssertToString($option, string $stringified, \\AKlump\\CheckPages\\Assert $assert, array $context)\n\n\nThese examples show how $option can have non-scalar values.\n\n-\n  bar:\n    - do\n    - re\n    - mi\n  baz:\n    lorem: ipsum dolar\n\n\nadd_test_option('bar', [\n  'onBeforeTest' =&gt; function ($option, \\AKlump\\CheckPages\\Parts\\Test $test, $context){\n    list($do, $re, $mi) = $option;\n    \/\/ ...\n  },\n  'onBeforeRequest' =&gt; function ($option, &amp;$driver, array $context){\n    list($do, $re, $mi) = $option;\n    \/\/ ...\n  },\n]);\n\nadd_test_option('baz', [\n  'onBeforeTest' =&gt; function ($option, \\AKlump\\CheckPages\\Parts\\Test $test, $context){\n    if ($option['lorem'] === 'ipsum dolar') {\n      \/\/ ...\n    }\n  },\n]);\n\nrun_suite('*');\n\n\n\n\nThe onBeforeTest callback is the best place to put custom processing if you want to hijack a \"test\". For example you could use it to set a bunch of custom variables. It's not a test, but a processor, in such a case.\n\n\n\nIn some cases you may want to advance to the next test after you finish executing some code inside of onBeforeTest in your custom test option. That is to say, you want to mark the test (option) as complete and stop any further execution on that test config. To do this you should return the value \\AKlump\\CheckPages\\Parts\\Test::IS_COMPLETE. This will mark the test neither passed nor failed, rather it will silently move on.\n\nadd_test_option('event.create', [\n  \"onBeforeTest\" =&gt; function ($option, \\AKlump\\CheckPages\\Parts\\Test $test, array $context) {\n\n    \/\/ ...\n\n    return \\AKlump\\CheckPages\\Parts\\Test::IS_COMPLETE;\n  },\n]);","tags":"","url":"ext--add_test_option.html"},{"title":"Event Responders","text":"To see all events look to \\AKlump\\CheckPages\\Event.\n\n\n\nIn this example a \"shorthand\" is built that can expand to multiple tests.\n\nrespond_to(\\AKlump\\CheckPages\\Event::SUITE_LOADED, function (\\AKlump\\CheckPages\\Event\\SuiteEventInterface $event) {\n  $suite = $event-&gt;getSuite();\n  foreach ($suite-&gt;getTests() as $test) {\n    $config = $test-&gt;getConfig();\n\n    \/\/ Look for the shorthand: \"http.methods_not_allowed\".  Remember this runs\n    \/\/ before the configuration is validated, so shorthand is free to take any\n    \/\/ form, and doesn't have to match the schema.\n    if (isset($config['http']['methods_not_allowed'])) {\n\n\n      \/\/ Now that we've found it, we will replace the \"test\" with the multiple\n      \/\/ tests that we generate in array_map().\n      $suite-&gt;replaceTestWithMultiple($test, array_map(function ($method) use ($config) {\n\n        \/\/ This is a single, expanded-from-shorthand test configuration.\n        return [\n          'why' =&gt; sprintf('Assert %s returns 405: Method Not Allowed', $method),\n          'url' =&gt; $config['url'],\n          'request' =&gt; ['method' =&gt; $method],\n          'expect' =&gt; 405,\n        ];\n      }, $config['http']['methods_not_allowed']));\n    }\n  }\n});","tags":"","url":"ext--event-responders.html"},{"title":"Imports: Static Abstraction","text":"See plugin page.","tags":"","url":"ext--imports.html"},{"title":"Mixins: Shared Code Between Runners","text":"# file: runner.php\nadd_mixin('my_custom_mixin');\n\n\n\n  When you want to share code across runners, you should look to mixins. Often you will want to put your runner function implementations inside a mixin file.\n\n\n\n\nAnother way to extend Check Pages is to use the add_mixin() function. This method is easier and faster than writing a plugin. It is a simple means to share runner customisation across different runners, or even projects. This is the basis for the authentication providers shipped with Check Pages.\n\n.\n\u2514\u2500\u2500 cp_tests\n    \u251c\u2500\u2500 mixins\n    \u2502   \u2514\u2500\u2500 foo.php\n    \u251c\u2500\u2500 runner.php\n    \u2514\u2500\u2500 suite.yml\n\n\n\nCreate a directory to contain one or more mixin files. This can be located within any resolvable directory. (See \\AKlump\\CheckPages\\Parts\\Runner::resolve.)\nIn that directory create a file, whose filename will be used as the first argument to add_mixin()--the mixin \"name\". So for add_mixin('mixins\/foo') you should create mixins\/foo.php as shown in the diagram above.\nIn the runner file, make reference to the mixin, passing the configuration as expected by the mixin.\n\n# file: runner.php\n\nadd_mixin('mixins\/foo', [\n  \"title\" =&gt; \"Lorem\",\n  \"color\" =&gt; \"blue\",\n]);\n...\n\nThe second argument, the configuration, is available in the mixin file, mixins\/foo.php as $config.\n\n# file: mixins\/foo.php\n\n$title = $config['title'];\n$color = $config['color'];\n\n\nThe runner instance \\AKlump\\CheckPages\\Parts\\Runner is available as $runner.\nYou may use any of the runner_functions.inc as you might otherwise do in a runner file.\nBy convention, you may create an class named for the mixin in your file if necessary.\nYou should add the namespace AKlump\\CheckPages\\Mixins to your mixin file.\n\n\n\n\nYou may write output if desired, for example:\n\necho sprintf('Base URL is %s', config_get('base_url')) . PHP_EOL;\necho \\AKlump\\LoftLib\\Bash\\Color::wrap('blue', 'foo');\n\n\n\n\nYou should use the namespace AKlump\\CheckPages\\Mixins for any class objects you might create.\n\n\n\nTo stop testing immediately you should throw an instance of \\AKlump\\CheckPages\\Exceptions\\StopRunnerException. The message argument will be displayed to the user.","tags":"","url":"ext--mixins.html"},{"title":"Plugins: Full Customization","text":"Inside the plugin folder require your dependency with the --no-install flag.\nDo not add PLUGIN\/composer.lock to the repo.\nCompile the plugins .\/bin\/compile_plugins.php.php.\n\n\n\n\nConfiguration keys provided by plugins should be lower-cased, space-separated in keeping with human-like syntax.  See pixel ratio below for an example.\n\nDo not make them mixed- or snake-case.\n\n-\n  why: Demonstrate testing against a \"retina\" display\n  url: \/test_subject.html\n  device:\n    pixel ratio: 2\n\n\n@todo Below here is old, needs update.\n\n\n\n\n\nHow it looks is myriad and you must refer to the plugin code to determine how it's implemented when writing tests.\n\n\n\nThis is the most involved method of extending Check Pages, and offers the greatest control as well.\n\n@todo Where do I put these as an end user?\n\n\n\n\nCreate a unique folder in plugins with the following structure. In this example the new plugin will be called foo_bar.\n\nplugins\n\u2514\u2500\u2500 foo_bar\n   \u251c\u2500\u2500 compile.php\n   \u251c\u2500\u2500 FooBar.php\n   \u251c\u2500\u2500 README.md\n   \u251c\u2500\u2500 schema.definitions.json\n   \u251c\u2500\u2500 schema.assertion.json\n   \u251c\u2500\u2500 schema.test.json\n   \u251c\u2500\u2500 suite.yml\n   \u2514\u2500\u2500 test_subject.html\n\nWrite the suite.yml file which will be run against test_subject.html, test_subject.php, test_subject.json, etc\nCreate test_subject.html or test_subject.php as needed to test _\nsuite.yml_.\nREADME.md is optional, but will be added to the Check Pages documentation when it's compiled and should be used to give examples of how the plugin should be implemented.\n\n\n\n\nThe plugin may provide schema with any of the following files:\n\n\nmy_plugin\/schema.definitions.json\nmy_plugin\/schema.test.json\nmy_plugin\/schema.assertion.json\n\n\n(Inspect plugins to see how these are used. Be aware that some properties are reserved and added automatically, i.e., why, extra; you should not add these in your plugin. Here are some examples.)\n\n# file: schema.assertion.json\n\n\n{\n    \"type\": \"object\",\n    \"required\": [\n        \"foo\"\n    ],\n    \"properties\": {\n        \"foo\": {\n            \"$ref\": \"#\/definitions\/dom__dom\"\n        }\n    },\n    \"additionalProperties\": false\n}\n\n\n# file: schema.assertion.json\n\n\n{\n    \"js_eval\": {\n        \"type\": \"string\",\n        \"pattern\": \".+\",\n        \"examples\": [\n            \"location.hash\"\n        ]\n    }\n}\n\n\n\n\nThe json_schema plugin is a good example of a plugin that totally handles the assertion on it's own. You may want to study that if you need to do something fancy.\n\nYou can see the basic strategy here:\n\n\nYou may only return TRUE, indicating the assertion passed.\nIf it failed you must throw an exception, the message of which will be printed in the test results as to the reason for the failure.\n\n\npublic function onBeforeAssert(\\AKlump\\CheckPages\\Event\\AssertEventInterface $event) {\n    $assert = $event-&gt;getAssert();\n    $response = $event-&gt;getReponse();\n\n  $assert-&gt;setAssertion(Assert::ASSERT_CALLABLE, function ($assert) {\n\n    \/\/ ... do your fancy assertion\n\n    if ($it_failed) {\n      throw new \\RuntimeException(sprintf('The reason for the failure'));\n    }\n\n    return TRUE;\n  });\n}\n\n\n\n\nTo run a plugin's tests do this: .\/bin\/run_plugin_tests &lt;plugin&gt;.  (Don't forget to bump build plugins if you make a change.)\n\n\n\nDo not edit the following, as they are created in the build step and will be overwritten. To affect these files you need to look to plugins\/\ndirectory, which contains the source code.\n\n.\n\u251c\u2500\u2500 tests\n\u2502     \u251c\u2500\u2500 plugins\n\u2502     \u2502     \u251c\u2500\u2500 foo.yml\n\u2502     \u2502     \u2514\u2500\u2500 javascript.yml\n\u2502     \u251c\u2500\u2500 runner_plugins.php\n\u2514\u2500\u2500 web\n    \u2514\u2500\u2500 plugins\n        \u251c\u2500\u2500 foo.html\n        \u2514\u2500\u2500 javascript.html\n\n\n\n\n\nIf your plugin needs to do something unique during compilation, such as provide extra files, it can implement compile.php. Here's an example from the imports plugin.\n\n# file: imports\/compile.php\n\n\/**\n * @file Copy over the imports files during compile.\n *\/\n\n$source = \"$plugin_dir\/imports\";\n$destination = \"$compile_dir\/tests\/imports\";\n\nif (!is_dir($destination)) {\n  mkdir($destination, 0777, TRUE);\n}\ncopy(\"$source\/_headings.yml\", \"$destination\/_headings.yml\");\ncopy(\"$source\/_links.yml\", \"$destination\/_links.yml\");\n\nforeach ([\n           \"$destination\/_headings.yml\",\n           \"$destination\/_links.yml\",\n         ] as $path) {\n  if (!file_exists($path)) {\n    return FALSE;\n  }\n  $data = file_get_contents($path);\n  $data = str_replace('test_subject', $plugin['id'], $data);\n  if (!file_put_contents($path, $data)) {\n    return FALSE;\n  }\n}","tags":"","url":"ext--plugins.html"},{"title":"Shorthand: Simpler, Cleaner, and More Readable","text":"# file: suite.yaml\n-\n  user: foo_user\n  item.delete: 123\n\n\n\n  Shorthand is a way to simplify the reading and writing of your tests.\n\n\n\n\nWithout the custom shorthand, the above would have been written like this:\n\n# file: suite.yaml\n\n-\n  user: foo_user\n  url: \/api\/items\n  request:\n    method: delete\n    body: \"{id:123}\"\n  find:\n    -\n      path: result\n      is: deleted\n\n\nHowever, by adding item.delete using add_shorthand(), we get the ability to write less code, which is less error-prone, and faster to reason about.\n\nHere's the runner implementation:\n\n# file: runner.php\n\nadd_shorthand('item.delete', function ($shorthand, $test) {\n  assert(is_numeric($shorthand));\n  $config = $test-&gt;getConfig();\n  $config['url'] = '\/api\/items';\n  $config['request'] = [\n    'method' =&gt; 'delete',\n    'body' =&gt; json_encode([\n      'id' =&gt; $shorthand\n    ]),\n  ];\n  $config['find'] = $config['find'] ?? [];\n  $config['find'][] = [\n    'path' =&gt; 'result',\n    'is' =&gt; 'deleted',\n  ];\n  $test-&gt;setConfig($config);\n});\n\n\n\n\nadd_shorthand('json_factory', function ($shorthand, \\AKlump\\CheckPages\\Parts\\Test $test) use ($runner) {\n  assert(is_array($shorthand));\n  $config = $test-&gt;getConfig();\n  $path = $runner-&gt;resolveFile($shorthand['schema']);\n  $faker = new Faker($path);\n  $data = $faker-&gt;jsonSerialize();\n\n  foreach (($shorthand['values'] ?? []) as $key =&gt; $value) {\n    $data[$key] = $value;\n  }\n\n  $config['is'] = json_encode($data);\n\n  $test_configs = [];\n  $test_configs[] = $config;\n  $test_configs[] = [\n    'set' =&gt; $config['set'] . '.validationSchema',\n    'is' =&gt; json_encode($faker-&gt;getValidationSchema()),\n  ];\n  $test-&gt;getSuite()-&gt;replaceTestWithMultiple($test, $test_configs);\n});\n\n\n\n\nFollow this strategy if you need to keep the value of $shorthand in the test, for other event handlers or later processing of some sort. See Stash for more info.\n\n# file: runner.php\n\nadd_shorthand('foo', function ($shorthand, $test) {\n  $config = $test-&gt;getConfig();\n  $config['extras']['foo'] = $shorthand;\n  $test-&gt;setConfig($config);\n});","tags":"","url":"ext--shorthand.html"},{"title":"Code Snippets","text":"This page will list out some example code you might use while extending.\n\n\n\nThis example shows how to make a request from the body of a Shorthand.\n\nadd_shorthand('bundle_access', function ($shorthand, \\AKlump\\CheckPages\\Parts\\Test $test) {\n  $url = $test-&gt;getSuite()-&gt;getRunner()-&gt;url('\/foo\/bar');\n  $guzzle = new \\AKlump\\CheckPages\\GuzzleDriver();\n  $response = $guzzle-&gt;getClient()-&gt;get($url);\n  $data = json_decode($response-&gt;getBody(), TRUE)['data'];\n});","tags":"","url":"ext--snippets.html"},{"title":"File Output","text":"File output is enabled in the runner configuration file. Two things are required to enable this feature:\n\n\nAn existing, writeable directory\nAn entry in the runner config with the location of the directory as a resolvable path.\n\n\nfiles: files\/dev\n\n\nOnce you have this enabled, plugins may make use of this for file output during testing.\n\n\n\n\nEach suite will create a subdirectory by it's filename.\nIn that directory the following files will be created:\n\n\nurls.txt a list of urls that failed testing.\nfailures.txt verbose output of the failures only.\n\n\n\nTry using tail -f files\/SUITE\/urls.txt during development.\n\n\n\nAuthentication can slow down your tests. To mitigate this you can create a writeable folder at {config.files}\/storage and the session cookies will be written to disk the first time they are obtained from the test subject. After that, authentication will skip the login step and pull the session data from files\/storage. Protect the contents of that directory because it contains credentials.\n\nIf you do not want this feature, then make sure that there is no directory called storage in the the directory you've defined as your writeable files in the runner config.","tags":"","url":"file_output.html"},{"title":"Testing Forms","text":"The following is how you can test the contact form:\n\n-\n  why: Gather form info for next test.\n  visit: \/contact\n  find:\n    -\n      why: Capture form build ID to use in next POST test.\n      dom: '.contact-form [name=\"form_build_id\"]'\n      attribute: value\n      set: formBuildId\n    -\n      why: Capture form ID to use in next POST test.\n      dom: '.contact-form [name=\"form_id\"]'\n      attribute: value\n      set: formId\n    -\n      why: Capture submit button value to use in next POST test.\n      dom: '.contact-form [name=\"op\"]'\n      attribute: value\n      set: op\n    -\n      why: Capture honeypot_time to use in next POST test.\n      dom: '.contact-form [name=\"honeypot_time\"]'\n      attribute: value\n      set: honeypotTime\n\n-\n  why: Prevent honeypot module from invalidating submission.\n  sleep: 3\n\n-\n  why: Assert contact form stays on \/contact after successful submission.\n  visit: \/contact\n  request:\n    method: POST\n    headers:\n      Content-Type: application\/x-www-form-urlencoded\n    body: form_id=${formId}&amp;form_build_id=${formBuildId}&amp;op=${op}&amp;honeypot_time=${honeypotTime}&amp;name=Alpha&amp;mail=alpha@foo.com&amp;message[0][value]=lorem%20ipsum\n  find:\n    -\n      dom: 'meta[property=\"og:url\"]'\n      attribute: content\n      matches: \/\\\/contact$\/\n    -\n      why: Assert no form messages were triggered.\n      dom: .message[data-level=\"error\"]\n      count: 0\n\n\n\n\n\nNot yet developed.\n\n-\n  url: \/contact\n  form:\n    -\n      name: name\n      value: Alpha\n    -\n      name: mail\n      value: alpha@foo.com\n    -\n      name: message[0][value]\n      value: lorem ipsum","tags":"","url":"forms--drupal.html"},{"title":"Suite Groups","text":"It may be helpful to combine suites into groups.\n\nThis is done by placing one or more suites into a folder. The name of the folder containing the suites is the group ID.\n\nThat's it.\n\nYou can use the --group=&lt;GROUP_ID&gt; to filter by group.\n\nGiven this example structure...\n\n.\n\u2514\u2500\u2500 suites\n    \u251c\u2500\u2500 admin\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 status.yml\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 scenario1.yml\n    \u251c\u2500\u2500 api\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 crud.yml\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 scenario1.yml\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 scenario2.yml\n    \u2514\u2500\u2500 web_ui\n        \u251c\u2500\u2500 contact.yml\n        \u251c\u2500\u2500 footer.yml\n        \u2514\u2500\u2500 homepage.yml\n\n\nSetup the runner like this:\n\n&lt;?php\nadd_directory(__DIR__ . '\/suites');\nrun_suite('admin\/*');\nrun_suite('api\/*');\nrun_suite('web_ui\/*');\n\n\nYou are able to use these CLI arguments:\n\n--group=admin\n--group=api\n\n# As well as via alias...\n-g web_ui\n\n\nNotice that two groups (admin, api) have scenarios with the same name (scenario1.yml). This is possible, but would require the use of both --group and --filter to run only one, as you might conclude:\n\nrun runner.php -g admin -f scenario1","tags":"","url":"grouping.html"},{"title":"Interpolation","text":"The timing of interpolation can be tricky.\nSince only plugins know what test keys they provide, they MUST handle interpolation on their own test keys.\nYou should set variables on the test, which will persist only for that test. \\AKlump\\CheckPages\\Parts\\Test::variables()\nYou should set variables on suite, which will persist across tests. \\AKlump\\CheckPages\\Parts\\Suite::variables\nYou may also want to use a throw-away instance such as is done in \\AKlump\\CheckPages\\Plugin\\LoopCurrentLoop::execute\nWhen a plugin interpolates test config, it should probably set the config so that the interpolated values are passed down the execution chain, e.g. taken from the Request plugin:\n\nfunction (TestEventInterface $event) {\n  $test = $event-&gt;getTest();\n  $this-&gt;config = $test-&gt;getConfig();\n  $test-&gt;interpolate($this-&gt;config['request']);\n  $test-&gt;setConfig($this-&gt;config);\n}  \n\n\n\nExample Implementations\n\n\n\\AKlump\\CheckPages\\Plugin\\Value\n\\AKlump\\CheckPages\\Plugin\\Request\n\n\n\n\nYou may set (global) variables in configuration, which may be interpolated by all suites and tests, by using the variables root-level key, like this:\n\nvariables:\n  foo_name: bar_value","tags":"","url":"interpolation.html"},{"title":"PhpStorm Integration","text":"You may use the phpstorm.http mixin to export test suites as HTTP Client files.\n\nTo enable this add the following to your runner:\n\nadd_mixin('phpstorm.http', [\n  'output' =&gt; config_get('files') . '\/phpstorm',\n  'single_file' =&gt; TRUE,\n  'exclude_passing' =&gt; TRUE,\n]);\n\n\n\nAs you can see you have to create an output directory as output.\nEach suite will create it's own file unless you set single_file to TRUE.\nSet exclude_passing and only failing tests will be exported.\n\n\nEach time your run the suite, the file will be recreated.\n\nBe careful with these files because they contain session cookies for any authenticated requests.","tags":"","url":"phpstorm.html"},{"title":"Continuing and Retesting","text":"These features only work when file storage is enabled.\n\n\n\nIf you have lots of suites, and you happen to interrupt the runner after you've completed a portion, you may want to continue, rather than start over. This sets up the scenario where you will use the --continue option.\n\nIt works by skipping all the suites before the one that was interrupted, and beings with that suite's first test. It means some of the tests in the suite will be repeated, that is, it doesn't continue with the last test, but the last suite.\n\n\n\nIf you have just run a bunch of suites, and had only a few failures, which you think you've fixed, you will want to use the --retest option.\n\nThis works by re-running any suite, which had one or more test failures. Yes, the entire suite is retested, not just the failing test in the suite.","tags":"","url":"retest.html"},{"title":"Search Results","text":"","tags":"","url":"search--results.html"},{"title":"Service Classes","text":"Create a service class that implements \\Symfony\\Component\\EventDispatcher\\EventSubscriberInterface\nAdd it to services.yml; tag it with { name: event_subscriber }\nSee the continue service for an example.","tags":"","url":"services.html"},{"title":"Stashing Values","text":"There is a special map key extras available on every test, which is ignored by the schema validator and can be used to stash\/retrieve arbitrary data by plugins and extension strategies throughout the testing process (and across event handlers).\n\nThe following example is taken from a mixin that had to move it's shorthand config to the stash and then act upon those values just before the request. You can see how extras is used to achieve this.\n\nIt's probably not a good idea to use the extras key directly when writing tests, as this is may not feel as clean or clear. Better to use add_shorthand as shown below.\n\nThis is how the test is written.\n\n-\n  why: 'Assert device d0 returns per schema.'\n  url: \/api\/2.0\/rest\/devices\/d0\n  query_auth:\n    count: 3\n\n\nadd_shorthand('query_auth', function ($shorthand, \\AKlump\\CheckPages\\Parts\\Test $test) use ($mixin_config) {\n  $test_config = $test-&gt;getConfig();\n  $test_config['extras']['query_auth'] = $shorthand + $mixin_config;\n  $test-&gt;setConfig($test_config);\n});\n\n\nNow the test has this structure, which will pass validation, yet still holds the data for retrieval.\n\n-\n  why: 'Assert device d0 returns per schema.'\n  url: \/api\/2.0\/rest\/devices\/d0\n  extras:\n    query_auth:\n      count: 3\n\n\n$dispatcher = $runner-&gt;getDispatcher();\n$dispatcher-&gt;addListener(\\AKlump\\CheckPages\\Event::REQUEST_CREATED, function (\\AKlump\\CheckPages\\Event\\DriverEventInterface $event) {\n  $test_config = $event-&gt;getTest()-&gt;getConfig();\n  if (!empty($test_config['extras']['query_auth'])) {\n    query_auth_calculate($test_config, $event-&gt;getTest());\n  }\n});","tags":"","url":"stash.html"},{"title":"Using `why` For Better Clarity","text":"The test suite output will automatically generate a line for each assertion, which in many cases is sufficient for test readability. However you may use the why key in your tests if you wish. This serves two purposes, it makes the tests more clear and readable, and it makes the test output more understandable, and especially if you're trying to troubleshoot a failed assertion.\n\n\nYou may attach why to a test, like this...\n\n-\n  why: Assert homepage has lorem text.\n  url: \/index.php\n  find:\n    - Lorem ipsum.\n\n\n\u23f1  RUNNING \"SUITE\" SUITE...\n\ud83d\udd0e Assert homepage has lorem text.\n\ud83d\udc4d http:\/\/localhost:8000\/index.php\n\u251c\u2500\u2500 HTTP 200\n\u251c\u2500\u2500 Find \"Lorem ipsum\" on the page.\n\u2514\u2500\u2500 Test passed.\n\n\n\n... or to any assertion, like this:\n\n-\n  url: \/index.php\n  find:\n    -\n      dom: h1\n      why: Assert page title is lorem text.\n      text: Lorem ipsum\n\n\n\u23f1  RUNNING \"SUITE\" SUITE...\n\ud83d\udc4d http:\/\/localhost:8000\/index.php\n\u251c\u2500\u2500 HTTP 200\n\u251c\u2500\u2500 Assert page title is lorem text.\n\u2514\u2500\u2500 Test passed.","tags":"","url":"why.html"},{"title":"Debugging While Running Tests","text":"https:\/\/xdebug.org\/docs\/all_settings#discover_client_host\n\nFrom your logs: 192.168.50.1 (your physical machine IP, where PhpStorm is running -- as seen from VM) vs 127.0.0.1 (your local VM). P.S. You should have mentioned that it's an remote debug \/ running on VM. For local it would have made no difference but for remote\n\nChecklist\n\n\nExecute lyb\nMake sure xdebug_disable_from_host is not activated in bin\/run_check_pages.\nMake sure PhpStorm is listening.\nCheck the Xdebug settings to match:\nxdebug.client_host = host.docker.internal\nxdebug.start_with_request = yes\nxdebug.discover_client_host = true","tags":"","url":"xdebug.html"}]};

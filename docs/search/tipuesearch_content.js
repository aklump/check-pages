var tipuesearch = {"pages":[{"title":"Changelog","text":"  All notable changes to this project will be documented in this file.  The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.  [Unreleased]   Add login and logout in includes\/drupal to be able to run suites as authenticated users.   [0.3] - 2020-08-15  Added   Added the --quiet flag   Changed   The default output is now how it was when adding the --debug flag, use the --quiet flag for less verbosity. Visual layout to make reading results easier and more clear.   Removed   The --debug flag  ","tags":"","url":"CHANGELOG.html"},{"title":"Check Pages","text":"  Very Simple QA    Summary  This project intends to provide a process of QA testing of a website, which is very fast to implement and simple to maintain.  You write your tests using YAML and they can look as simple as these two tests:  - url: \/  - url: \/admin   expect: 403   The first test will check the homepage to make sure it returns a 200 HTTP status code.  The second test will make sure the \/admin path returns 403 forbidden.  In a third test we can assert there is one logo image on the homepage, like so:  - url: \/   find:     - dom: '#logo img'       count: 1   For more code examples explore the \/examples directory.  Visit https:\/\/aklump.github.io\/check_pages for full documentation.  Terms Used   Test Runner - A very simple PHP file that defines the configuration and what test suites to run, and in what order.  @see includes\/runner.php. Test Suite - A YAML file that includes one or more checks against URLs. @see includes\/suite.yml. Test - A single URL check within a suite. Assertion - A single find action against the response body of a test, or a validation that the HTTP response code matches an expected value.   Install  The following creates a stand-alone project in a folder named check-pages.  See also Install In Another Composer Project.  $ composer create-project aklump\/check-pages   Quick Start  Run the example tests with the following commands.  Then open up the files in the example\/tests directory and study them to see how they work.1   Open a new shell window which will run the PHP server for our example test pages.  $ .\/bin\/server.sh Open a second shell window to execute the tests.  $ .\/bin\/test.sh   Some failing tests are also available to explore:  $ .\/check_pages failing_tests_runner.php   1 If you see no tests directory then create one and copy the contents of examples into tests.  The example tests directory will only be created if you use create-project as the installation method.  Requirements   alpha bravo   Troubleshooting  Try using the --show-source to see the response source code as well.  .\/check_pages failing_tests_runner.php --show-source     Quiet Mode  To make the output much simpler, use the --quite flag.  This will hide the assertions and reduce the output to simply pass\/fail.  .\/check_pages failing_tests_runner.php --quiet   On Your Own  When you are ready you should delete the contents of the tests folder and write your own tests there.  Don't worry, the original example files are located in the examples directory.  (If you have used the alternate installation method you will need to write your tests in another folder of your choosing not located in this project.  But for these examples, we'll assume a create-project installation.)  You will need a bare minimum file structure resembling:  . \u2514\u2500\u2500 tests     \u2514\u2500\u2500 config.yml     \u251c\u2500\u2500 suite.yml     \u2514\u2500\u2500 runner.php   Multiple Configuration Files  The project is designed to be able to run the same tests using different configurations.  You can create multiple configuration files so that you are able to run the same test on live and then on dev, which have different base URLs.  . \u2514\u2500\u2500 tests     \u251c\u2500\u2500 config.dev.yml     \u251c\u2500\u2500 config.live.yml     \u251c\u2500\u2500 suite.yml     \u2514\u2500\u2500 runner.php   In runner.php use the following line to specify the default config file:  load_config('config.dev');   When you're ready to run this using the live config add the config filename to the CLI command, e.g.,  $ .\/check_pages runner.php --config=config.live   Test functions  The test functions for your PHP test files are found in includes\/test_functions.inc.  Install In Another Composer Project  If you want to share dependencies with another project, like Drupal 8 for example, then use the alternative installation method.  The --dev flag is shown here, but use your own discretion.  Run the following from your Drupal app root directory.  $ composer require aklump\/check-pages --dev   Usage  In this case, since the project will be buried in your vendor directory, you will need to provide the directory path to your test files, when you run the test script, like this:  .\/vendor\/bin\/check_pages runner.php --dir=.\/tests_check_pages   This example assumes a file structure like this:  . \u251c\u2500\u2500 tests_check_pages \u2502\u00a0\u00a0 \u2514\u2500\u2500 runner.php \u2514\u2500\u2500 vendor     \u2514\u2500\u2500 bin         \u2514\u2500\u2500 check_pages     Javascript Is Supported   Javascript is supported if you have Chrome installed and you've added it's path to your runner config.   Dev Links Related to This   Learn more https:\/\/github.com\/GoogleChrome\/chrome-launcher https:\/\/peter.sh\/experiments\/chromium-command-line-switches\/ https:\/\/raw.githubusercontent.com\/GoogleChrome\/chrome-launcher\/v0.8.0\/scripts\/download-chrome.sh   Contributing  If you find this project useful... please consider making a donation. ","tags":"","url":"README.html"},{"title":"Search Results","text":" ","tags":"","url":"search--results.html"}]};

var lunrIndex = [{"id":"pdfs","title":"Asserting PDFs","body":"## Assert number of pages"},{"id":"authentication","title":"Authentication","body":"If you want to check pages as an authenticated user of a website, then you have to be logged in, or authenticated before the request is made. Some authentication providers are built-in, or you can write your own using  [add_test_option()](@options). You might refer to _includes\/drupal8.inc_ as a starting point.\n\n## Basic Setup\n\nThis example will use the `drupal8` built-in authentication provider. _Note: for Drupal 7 authentication, simply change `add_mixin('drupal8'...` to `add_mixin('drupal7'...`_.\n\n1. Create a YAML (or JSON) file containing user login credentials.  **Do not commit this to source control.** You can place this whereever, but in this example it will be located in the config directory as _config\/users.yml_. You may list as many users as you want. Each record must have the keys `name` and `pass`. Yes, `pass` is the un-hashed plaintext password for the user, so be cautious.\n\n    ```yaml\n    # File: config\/users.yml\n    -\n      name: admin\n      pass: 123pass\n    -\n      name: member\n      pass: secret5\n    ```\n\n2. Add the following to your test runner file. This tells your _runner.php_ to include the Drupal 8 authentication and from where to pull the user data.\n\n    ```php\n    # File: runner.php\n    add_mixin('drupal8', [\n      'users' => 'config\/users.yml',\n    ]);\n    ```\n\n4. In your test suite add the `user` option to a test, giving the username as the value. The request for that test will be made after first authenticating that user.\n\n   ```yaml\n   # File: suite.yml\n   -\n     user: admin\n     visit: \/admin\n   -\n     user: member\n     visit: \/admin\n     status: 403\n\n   ```\n\n## Variations on the Above\n\n1. If the login form is located at a non-standard URL, you may indicate that URL, which renders the login form, as shown here.\n\n    ```php\n    add_mixin('drupal8', [\n      'users' => 'config\/users.yml',\n      'login_url' => '\/login',\n    ]);\n    ```\n\n2. It's also worth nothing, once a user is authenticated, certain variables may be used on subsequenst tests. Notice how the variables persist into the second test even though it is not authenticated. The user variables will carry over into subsequent tests until the next authentication, when they will be re-set.\n\n   ```yaml\n   -\n   user: testbot.member\n   visit: \/user\/${user.uid}\/edit\n   -\n   visit: \/user\/${user.uid}\/edit\n   status: 403\n   -\n   visit: \/user\/${user.name}\n   status: 200\n   ```\n3. It's possible you don't want to use the same _users.yml_ data file for all configurations. To accommodate this you may replace the hardcoded path `config\/users.yml` with `config_get('extras.users')` and add the hard-coded path to each of your configuration files.\n\n   ```php\n   # file: runner.php\n   add_mixin('drupal8', [\n     'users' => config_get('extras.users'),\n   ]);\n   ```\n\n   ```yaml\n   # file: config\/live.yml\n   ...\n   extras:\n     users: config\/users--live.yml\n   ```\n\n   ```yaml\n   # file: config\/dev.yml\n   ...\n   extras:\n     users: config\/users--dev.yml\n   ```\n4. You can capture several user IDs at once like this. Furthermore, this can be moved to an import, and you have all user IDs available to all suites, very easily by importing with `- import: imports\/get_user_ids`  See [imports](@plugin_import) for more info.\n\n   ```yaml\n   # file: imports\/_get_user_ids\n\n   -\n     user: site_test.worker\n     set: workerUid\n     is: ${user.id}\n   -\n     user: site_test.admin\n     set: adminUid\n     is: ${user.id}\n   ```\n\n## CSRF Tokens\n\nThe token `${user.csrf}` is created automatically when you use `user`, and can be used as shown below:\n\n```yaml\n-\n  user: site_test.admin\n  url: \/cp-api\/${cp_api_public}\/jobs\n  request:\n    method: POST\n    headers:\n      X-Csrf-token: ${user.csrf}\n```"},{"id":"changelog","title":"Changelog","body":"All notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https:\/\/keepachangelog.com\/en\/1.0.0\/), and this project adheres to [Semantic Versioning](https:\/\/semver.org\/spec\/v2.0.0.html).\n\n## [Unreleased]\n\n- ability to override the group based on dirname, e.g. `run_suite($component_id, 'group_alias');`\n- the log file should not be deleted, only truncated between runners.\n- \"why\" does not work with \"import\", it needs to be able to be there and override as well.\n- There is an issue with the JS browser that looses the session cookie if the url has a redirect. When the browser redirects to the new URL, the session will be lost. I believe it's a bug in this library: https:\/\/github.com\/chrome-php\/chrome. If you're trying to assert w\/javascript on a redirected URL, the work around is to use two tests where the first does not use javascript and captures the variable `${redirect.location}` which you can then use in the subsequent test, which uses the JS browser.\n\n  ```yaml\n  -\n    user: foo_user\n    js: false\n    visit: \/my-current-cycle\n    status: 302\n\n  -\n    why: Assert chart print link button appears on my-current-cycle page\n    user: foo_user\n    js: true\n    visit: \"${redirect.location}\"\n    find: ...\n\n  ```\n\n## [] -\n\n### Changed\n\n- Executable renamed from _check\\_pages_ to _checkpages_\n- _vendor\/bin\/check\\_pages_ is now _vendor\/bin\/checkpages_\n\n### Removed\n\n- _.\/dist\/bin\/checkpages_.  Use _.\/checkpages_ instead.\n\n## [0.23.0] - 2023-12-29\n\n### Added\n\n- Added REQUEST_STARTED event to be used instead of TEST_STARTED.\n\n### Deprecated\n\n- Deprecated TEST_STARTED event.\n\n## [0.21.0] - 2023-11-10\n\n### Added\n\n- `init` command to replace; `create_test_directory`\n\n### Removed\n\n- `create_test_directory` stand alone script.\n\n## [0.20.0] - 2023-10-26\n\n### Changed\n\n- The `--filter` now works as a regex pattern, similar to PhpUnit. Matches against `$group\/$id`; see docs for more info.\n\n### Deprecated\n\n- `--group` is no longer necessary; use `--filter=$group\/` instead.\n\n## [0.21.0] - 2023-10-29\n\n### Added\n\n- `bash` handler\n- `matches` no supports RegEx grouping; see _matches.md_.\n\n### Fixed\n\n- An issue with Cypress and some env valued with special chars.\n\n## [0.19.0] - 2023-10-18\n\n### Added\n\n- `on fail: skip suite`\n- global use as `checkpages` see _install.md_.\n\n## [0.18.0] - 2023-10-14\n\n### Changed\n\n- POTENTIAL BREAKING CHANGE! See section in docs \"Understanding How Multiple DOM Elements Are Handled\" as some logic has been changed around this topic.\n- Minimum PHP is now 7.4.\n- BREAKING CHANGE! The _drupal_ mixin will now remove all suite variables it added at the end of the test. If you want to use them across tests you need to use `set` on the test.\n- _phpstorm.http_ mixin name changed to _http_request_files_; update any `add_mixin()` calls that reference this. Also remove the `output` option which is no longer used.\n- Breakpoints will run only when passing `--break`; previously they ran in verbose mode.\n- `expect` changed to `status`; update all tests.\n- `\\AKlump\\CheckPages\\Event::RUNNER_CONFIG` -> `\\AKlump\\CheckPages\\Event::RUNNER_STARTED`\n- `resolve` -> `tryResolveDir`\n- `resolveFile` -> `tryResolveFile`\n- `end_loop` changed back to `end loop`\n- `\\AKlump\\CheckPages\\Parts\\Runner::url()` -> `\\AKlump\\CheckPages\\Parts\\Runner::withBaseUrl()`\n\n### Fixed\n\n- An issue with `location` and multiple redirects where it would not return the final redirect URL, but the first. This will break some tests. You will need to update your tests with the final URL.\n\n## [0.17] - 2022-11-27\n\n### Removed\n\n- The configuration for `chrome` can be removed from your .yml file, it's now automatic.\n\n### Changed\n\n- `TEST_FINISHED` changed to `TEST_FINISHED`\n- `TEST_FINISHED` now is for `\\AKlump\\CheckPages\\Event\\TestEventInterface`\n- How user feedback is handled and written.\n\n## [0.16.0] - TBD\n\n### Deprecated\n\n- `Runner::getRunner`\n- `Runner::setRunner`\n- `with_extras()`\n\n### Changed\n\n- the _drupal_ mixin no longer sets variables with `user.` as the base prefix, but instead uses the passed value of `user`, e.g. `user: foo` sets: `foo.id`, etc.\n- The mixin config var has changed to `$mixin_config` instead of `$config`.\n- `add_shorthand()` callback arguments changed to ($shorthand, Test). Also you will no longer `unset()` the shorthand key because it's been removed from the test config.\n- `Event::TEST_FINISHED` has changed from `\\AKlump\\CheckPages\\Event\\DriverEventInterface` to `\\AKlump\\CheckPages\\Event\\TestEventInterface`.\n- Changed `is\/set` to `value\/set`; replace `is:` with `value:`. See value plugin for details.\n- `request.method` is now required; previously it could be omitted and would be assumed GET.\n- Renamed _data_ plugin to _path_ plugin.\n- Swithed to Symfony console.\n- `.\/check_pages` became `.\/check_pages run` (added `run` as a required argument).\n- BREAKING CHANGE! `drupal8` and `drupal7` mixins changed to a single `drupal`.\n- BREAKING CHANGE! You must use `$config` instead of the like-named variable for mixin configuration. E.g. `$drupal8, $drupal7` are now both just `$config`.\n- BREAKING CHANGE! Rename `global $app` to `$runner`.\n- BREAKING CHANGE! The style plugin now uses this format; (you must replace `style` with `dom` and `property` with `style`).\n  ```yaml\n  -\n    dom: .visible\n    style: display\n    ...\n  ```\n- If `status` is not explicitly provided, any value from `200` to `299` will pass the test. Previously the response code would have to be exactly `200` to pass.\n\n### Added\n\n- The concept of groups.\n- The group (--group, -g) filter\n- The import feature.\n- The authentication for Drupal now adds the following variables automatically: `${user.uid}, ${user.id}, ${user.name}, ${user.pass}` for the authenticated user. That means you can use these in subsequent tests, even if not authenticating said test.\n- `--request` and `--response`.\n- Request headers and body to display with `--request` or `--show-source`. If you do not want to see request and ONLY response, use `--response` instead of `--show-source`.\n- --help and -h to printout CLI options.\n- A debug message if test is missing assertions.\n- Start and stop date and times.\n- `--filter` now accepts multiple suites as CSV, e.g. `--filter=foo,bar` as well as single suites.\n- The ability to test data-serving URLs (i.e. API endpoints) using JSON Schema.\n\n### Fixed\n\n- --quite mode was not working.\n\n## [0.15.0] - 2021-07-16\n\n### Added\n\n- `config_get()`\n\n## [0.14.0] - 2021-07-16\n\n### Added\n\n- The ability to omit _config\/_ in the CLI. Where before you had to pass `--config=config\/live`, which still works, you may also pass `--config=live` if your configuration directory is named by the standard name of _config_. If it is not then this shortcut will fail.\n\n## [0.13.0] - 2021-07-07\n\n### Added\n\n- Output file urls.txt\n- Output file failures.txt\n\n## [0.12.0] - 2021-07-06\n\n### Added\n\n- `why` key for message overrides.\n- Disk storage of sessions storage across runners. See docs for more info.\n\n## [0.11.0] - 2021-07-03\n\n### Added\n\n- Create tests directory prompt on package install.\n- Authentication for Drupal 7 and Drupal 8 via `with_extras()` function.\n- `add_test_option()` function for custom functionality.\n\n### Removed\n\n- `composer create-project` is no longer supported as it was too confusing and unnecessary to have two installation means.\n\n## [0.10.0] - 2021-05-28\n\n### Added\n\n- `is not`\n- `not matches`\n\n### Changed\n\n- `exact` is now `is`; change all usages.\n- `match` is now `matches`; change all usages.\n- `none` is now `not contains`; change all usages.\n\n### Removed\n\n- `exact`\n- `match`\n- `none`\n\n### Fixed\n\n- JS error when the eval is used more than once per test.\n\n## [0.9.0] - 2021-05-28\n\n### Added\n\n- The header assertion plugin\n\n## [0.8.0] - 2021-04-14\n\n### Added\n\n- The `javascript` selector for expression evaluation.\n\n### Changed\n\n- It's no longer required to add `js: true` to a test implementing a `style`\n  selector. It will now be forcefully set (or overridden) to `true`. This is because the `style` selector only works when javascript is enabled.\n\n## [0.7.0] - 2021-04-08\n\n### Added\n\n- Added the `none` assertion to ensure a substring does not appear on the page.\n\n## [0.6.0] - 2021-01-16\n\n### Added\n\n- Added new selector 'attribute'.\n- Added ability to do style asserts.\n- Added globbing to run_suite(), e.g. `run_suite('*')` to run all suites. Normal glob patterns work as well, which are relative to the --dir directory, or defaults to the directory containing _runner.php_.\n\n### Changed\n\n- run_suite() now returns void().\n\n## [0.5.1] - 2021-01-14\n\n### Added\n\n- The alias `visit:` may be used instead of `url:`\n- Examples now show using `visit:`, though `url:` still works.\n\n## [0.5] - 2021-12-30\n\n### Added\n\n- `--filter` parameter to limit runner to a single suite from the CLI.\n\n## [0.4] - 2020-12-01\n\n### Added\n\n- Javascript support with Chrome.\n\n### Changed\n\n- The way the CSS selector works has changed fundamentally and may break your tests. Refer to the following test YAML. Prior to 0.4 that would only choose the first `.card__title` on the page and assert it's text matched the expected. Starting in 0.4, all `.card__titles` found on the page will be matched and the assert will pass if any of them have matching text.\n\n    ```yaml\n    -\n      visit: \/foo\/bar\n      find:\n        -\n          dom: .card__title\n          text: The Top of the Mountain\n    ```\n\n- If you need the earlier functionality you should use the `xpath` selector as shown here to indicate just the first element with that class.\n\n   ```yaml\n   -\n     visit: \/foo\/bar\n     find:\n       -\n         xpath: '(\/\/*[contains(@class, \"card__title\")])[1]'\n         text: The Top of the Mountain\n   ```\n\n## [0.3] - 2020-08-15\n\n### Added\n\n- Added the `--quiet` flag\n\n### Changed\n\n- The default output is now how it was when adding the `--debug` flag, use the `--quiet` flag for less verbosity.\n- Visual layout to make reading results easier and more clear.\n\n### Removed\n\n- The `--debug` flag"},{"id":"readme_old","title":"Check Pages","body":"## Very Simple QA for HTTP\n\n![Check Pages](..\/..\/images\/check-pages.jpg)\n\n## Heavy Development\n\n**Use at your own risk. This project is under heavy development and is undergoing changes pretty regularly.**\n\n## Summary\n\nThis project intends to provide a process of QA testing of a website, which is very fast to implement and simple to maintain. You write your tests using YAML and they can be as simple as checking for a 200 HTTP response on the homepage.  PHP is working under-the-hood, but general use does not require you to know PHP.\n\n**Visit  for full documentation.**\n\n## Clarity of Purpose and Limitation\n\nThe mission of this tool is to provide testing for URLS and webpages in the most simple and concise syntax possible. For testing scenarios that require element interaction, such as clicks, hovers, scrolling, etc, there are amazing projects out there such as [Cypress](https:\/\/www.cypress.io\/). This project will never try to compete with that crowd, and shall always restrict it's testing of the DOM to assertions against a single snapshot of the loaded URL.\n\n## Terms Used\n\n* _Test Runner_ - A very simple PHP file that defines the configuration and what test suites to run, and in what order. @see _includes\/runner.php_.\n* _Test Suite_ - A YAML file that includes one or more checks against URLs. @see _includes\/suite.yml_.\n* _Test_ - A single URL check within a suite.\n* _Assertion_ - A single check action against the HTTP response of a test, i.e., headers, body, status code, javascript, etc.\n\n## Stand-alone Installation\n\nThis quickstart is to paste the below into a terminal and execute it.  It will install check pages in your home directory.\n\n```shell\n\/bin\/bash -c \"$(curl -fsSL https:\/\/raw.githubusercontent.com\/aklump\/check_pages\/refs\/heads\/master\/setup-check-pages.sh)\"\n```\n\n## Install with Composer\n\n1. Because this is an unpublished package, you must define it's repository in\n   your project's _composer.json_ file. Add the following to _composer.json_ in\n   the `repositories` array:\n\n    ```json\n    {\n     \"type\": \"github\",\n     \"url\": \"https:\/\/github.com\/aklump\/check-pages\"\n    }\n    ```\n1. Require this package:\n\n    ```\n    composer require aklump\/check-pages:^0.23\n    ```\n\n* In most cases the `--dev` is appropriate, but use your own discretion.\n* You will be asked if you want to create a directory for your tests when you install. This will copy over a basic scaffolding to build from.1\n* More detailed examples are located in the _example_ directory.\n\n## Example Tests Demo\n\nIf you are new to this project and would like to see a demonstration, it would be a good idea to start with the examples. Run the example tests with the following commands. Then open up the files in the _example\/tests_ directory and study them to see how they work.1\n\n1. Open a new shell window which will run the PHP server for our example test pages.\n\n        $ .\/bin\/start_test_server.sh\n\n1. Open a second shell window to execute the tests.\n\n        $ .\/bin\/run_tests.sh\n\n1 If you see no _tests_ directory then create one and copy the contents of _examples_ into _tests_. The example _tests_ directory will only be created if you use `create-project` as the installation method.\n\n### Writing Your First Test Suite\n\n1. `checkpages init` to create tests directory and runner in the current directory.\n\n### Multiple Configuration Files\n\nThe project is designed to be able to run the same tests using different configurations. You can create multiple configuration files so that you are able to run the same test on live and then on dev, which have different base URLs.\n\n    .\n    \u2514\u2500\u2500 tests\n        \u251c\u2500\u2500 config\/dev.yml\n        \u251c\u2500\u2500 config\/live.yml\n        \u251c\u2500\u2500 suite.yml\n        \u2514\u2500\u2500 runner.php\n\nIn _runner.php_ use the following line to specify the default config file:\n\n    load_config('config\/dev');\n\nWhen you're ready to run this using the live config add the config filename to the CLI command, e.g.,\n\n    $ .\/checkpages runner.php --config=config\/live\n\n### Test functions\n\nThe test functions for your PHP test files are found in _includes\/runner_functions.inc_.\n\n## Is JS Supported?\n\nYes, not by default, but you are able to indicate that given tests requires Javascript be run. Read on...\n\n## Javascript Testing Requirements\n\n* Your testing machine must have Chrome installed.\n\n## Enable Javascript per Test\n\nUnless you enable it, or in the case the selector type (i.e., `style`\n, `javascript`) requires it, javascript is not run during testing. If you need\nto assert that an element exists, which was created from Javascript (or\notherwise need javascript to run on the page), you will need to indicate the\nfollowing in your test, namely `js: true`.\n\n```yaml\n-\n  visit: \/foo\n  js: true\n  find:\n    -\n      dom: .js-created-page-title\n      text: Javascript added me to the DOM!\n```\n\n## Asserting Javascript Evaluations\n\nLet's say you want to assert the value of the URL fragment. You can do that with\nthe `javascript` selector. The value of `javascript` should be the expression to\nevaluate, once the page loads. Notice that you may omit the `js: true` as it\nwill be set automatically.\n\n```yaml\n-\n  visit: \/foo\n  find:\n    -\n      javascript: location.hash\n      is: \"#top\"\n```\n\n## Javascript Testing Related Links\n\n* [Chrome DevTools Protocol 1.3](https:\/\/chromedevtools.github.io\/devtools-protocol\/1-3\/)\n* [Learn more](https:\/\/developers.google.com\/web\/updates\/2017\/04\/headless-chrome)\n* [CLI parameters](https:\/\/source.chromium.org\/chromium\/chromium\/src\/+\/master:headless\/app\/headless_shell_switches.cc)\n* [More on parameters](https:\/\/developers.google.com\/web\/updates\/2017\/04\/headless-chrome#command_line_features)\n* https:\/\/github.com\/GoogleChrome\/chrome-launcher\n*\n* https:\/\/raw.githubusercontent.com\/GoogleChrome\/chrome-launcher\/v0.8.0\/scripts\/download-chrome.sh\n\n## Filter\n\nUse `--filter` to limit which suites are run.\n\nThe value passed to the filter will be matched against the `$group\/$id` of the suite. Behind the scenes it is treated as a regex pattern, if you do not include delimiters, they will be added and case will not matter.\n\nGiven the following test suites...\n\n```text\n.\n\u251c\u2500\u2500 api\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 menus.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 reports.yml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 users.yml\n\u2514\u2500\u2500 ui\n    \u251c\u2500\u2500 footer.yml\n    \u251c\u2500\u2500 login.yml\n    \u2514\u2500\u2500 menus.yml\n```\n\n| CLI                 | Matches                                |\n|---------------------|----------------------------------------|\n| `--filter=ui\/`      | ui\/footer.yml, ui\/login.yml, menus.yml |\n| `--filter=\/menus`   | api\/menus.yml, ui\/menus.yml            |\n| `--filter=ui\/menus` | suites\/ui\/menus.yml                    |\n\nNotice the usage of the `\/` separator to control how the group influences the result.\n\n### Complex Filter\n\nIt's possible to provide a complex filter that uses `or` logic like this:\n\n    .\/checkpages runner.php -f reports -f menus\n\n## Troubleshooting\n\nTry using the `--response` to see the response source code as well.\n\n    .\/checkpages runner.php --response\n\n### Usage\n\nIn this case, since the project will be buried in your vendor directory, you will need to provide the directory path to your test files, when you run the test script, like this:\n\n    .\/vendor\/bin\/check_pages runner.php --dir=.\/tests_check_pages\n\nThis example assumes a file structure like this:\n\n    .\n    \u251c\u2500\u2500 tests_check_pages\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 runner.php\n    \u2514\u2500\u2500 vendor\n        \u2514\u2500\u2500 bin\n            \u2514\u2500\u2500 check_pages\n\n## Contributing\n\nIf you find this project useful... please consider [making a donation](https:\/\/www.paypal.com\/cgi-bin\/webscr?cmd=_s-xclick&hosted_button_id=4E5KZHDQCEUV8&item_name=Gratitude%20for%20aklump%2Fcheck-pages)."},{"id":"readme","title":"Check Pages","body":"## Very Simple QA for HTTP\n\n![Check Pages](..\/..\/images\/check-pages.jpg)\n\n## Heavy Development\n\n**\u26a0\ufe0f Use at your own risk. This project is under heavy development and is undergoing changes pretty regularly.**\n\n## Summary\n\nThis project intends to provide a process of QA testing of a website, which is very fast to implement and simple to maintain. You write your tests using YAML and they can be as simple as checking for a 200 HTTP response on the homepage. PHP is working under-the-hood, but general use does not require you to know PHP.\n\n## Simple Test Syntax\n\nAssert the homepage loads.\n\n```yaml\n-\n  visit: \/\n```\n\nAssert the admin section is protected.\n\n```yaml\n-\n  visit: \/admin\n  why: Make sure the `\/admin` path returns 403 forbidden when not logged in.\n  status: 403\n```\n\nIn a third test we can assert there is one logo image on the homepage, like so:\n\n```yaml\n-\n  visit: \/\n  find:\n    -\n      dom: '#logo img'\n      count: 1\n```\n\nLastly, make sure there are no unprocessed tokens on the page (a.k.a. a substring does not appear):\n\n```yaml\n- visit: \/\n  find:\n    - not contains: '[site:name]'\n```\n\nFor more code examples explore the _\/examples_ directory.\n\n## Installation\n\nPaste the below into a terminal and execute it. It will install check pages in your home directory. Composer is required.\n\n```shell\n\/bin\/bash -c \"$(curl -fsSL https:\/\/raw.githubusercontent.com\/aklump\/check_pages\/refs\/heads\/master\/setup-check-pages.sh)\"\n```\n\n## Documentation\n\nhttps:\/\/aklump.github.io\/check-pages\/"},{"id":"ext__snippets","title":"Code Snippets","body":"This page will list out some example code you might use while extending.\n\n## Http Request\n\nThis example shows how to make a request from the body of a _Shorthand_.\n\n```php\nadd_shorthand('bundle_access', function ($shorthand, \\AKlump\\CheckPages\\Parts\\Test $test) {\n  $url = $test->getSuite()->getRunner()->withBaseUrl('\/foo\/bar');\n  $guzzle = new \\AKlump\\CheckPages\\GuzzleDriver();\n  $response = $guzzle->getClient()->get($url);\n  $data = json_decode($response->getBody(), TRUE)['data'];\n});\n```"},{"id":"cli","title":"Command Line Runner","body":"## Filter\n\nUse `--filter` to limit which suites are run.\n\nThe value passed to the filter will be matched against the `$group\/$id` of the suite. Behind the scenes it is treated as a regex pattern, if you do not include delimiters, they will be added and case will not matter.\n\n**Be careful with regex filters on the CLI; and be sure to wrap the filter in single quotes to prevent BASH interpolation.**\n\nThis is correct:\n\n```shell\nbin\/run_check_pages_tests.sh --filter='#api_day\/day$#'\n```\n\nGiven the following test suites...\n\n```text\n.\n\u251c\u2500\u2500 api\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 menus.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 reports.yml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 users.yml\n\u2514\u2500\u2500 ui\n    \u251c\u2500\u2500 footer.yml\n    \u251c\u2500\u2500 login.yml\n    \u2514\u2500\u2500 menus.yml\n```\n\n| CLI                 | Matches                                |\n|---------------------|----------------------------------------|\n| `--filter=ui\/`      | ui\/footer.yml, ui\/login.yml, menus.yml |\n| `--filter=\/menus`   | api\/menus.yml, ui\/menus.yml            |\n| `--filter=ui\/menus` | suites\/ui\/menus.yml                    |\n\nNotice the usage of the `\/` separator to control how the group influences the result.\n\n### Complex Filter\n\nIt's possible to provide a complex filter that uses `or` logic like this:\n\n    .\/checkpages runner.php -f reports -f menus\n\n## Troubleshooting\n\nTry using the `--response` to see the response source code as well.\n\n    .\/checkpages runner.php --response"},{"id":"config__secrets","title":"Config Secrets","body":"You may need to use secrets in your configuration. You should not include them directly in the configuration files, which are version controlled. Instead do like this:\n\n1. Create a file called _secrets.yml_ in the same directory as your main configuration file (_dev.yml_).\n2. Add _secrets.yml_ to your _.gitignore_\n1. Add secret values to this file.\n2. In the main configuration file, use interpolation to reference the secrets.\n3. Note: the same _secrets.yml_ will be shared for all configuration files in the same directory.\n\n_config\/secrets.yml_\n\n```yaml\nnew:\n  api:\n    secret: OWqQtt741kDd6x8c4zZgK0kCKXc51mZ\n```\n\n_config\/dev.yml_\n\n```yaml\n...\nextras:\n  apiSecret: ${new.api.secret}\n```\n\n_runner.php_\n\n```php\nload_config('config\/dev.yml');\n```"},{"id":"retest","title":"Continuing and Retesting","body":"## The Continue Option\n\nIf you have lots of suites, and you happen to interrupt the runner after you've completed a portion, you may want to continue, rather than start over. This sets up the scenario where you will use the `--continue` option.\n\nIt works by skipping all the suites before the one that was interrupted, and beings with that suite's first test. It means some of the tests in the suite will be repeated, that is, it doesn't continue with the last test, but the last suite.\n\n## The Retest Option\n\nIf you have just run a bunch of suites, and had only a few failures, which you think you've fixed, you will want to use the `--retest` option.\n\nThis works by re-running any suite, which had one or more test failures (that includes skips). Yes, the entire suite is retested, not just the failing test in the suite."},{"id":"dates","title":"Dates","body":"**The YAML parser will convert unquoted strings which look like a date or a date-time into a Unix timestamp. To avoid this you must quote your dates as shown below.**\n\n```yaml\n-\n  my_custom_mixin:\n    -\n      d: '2023-03-09'\n      cd: 8\n      or: 100\n      cf: soft\n```\n\n[learn more](https:\/\/symfony.com\/doc\/current\/components\/yaml.html#date-handling)"},{"id":"xdebug","title":"Debugging While Running Tests","body":"## XDebug 3\nhttps:\/\/xdebug.org\/docs\/all_settings#discover_client_host\n\nFrom your logs: 192.168.50.1 (your physical machine IP, where PhpStorm is running -- as seen from VM) vs 127.0.0.1 (your local VM). P.S. You should have mentioned that it's an remote debug \/ running on VM. For local it would have made no difference but for remote\n\n### Checklist\n\n1. Execute `lyb`\n2. Make sure `xdebug_disable_from_host` is not activated in _bin\/run_check_pages_.\n3. Make sure PhpStorm is listening.\n4. Check the Xdebug settings to match:\n   ```\n   xdebug.client_host = host.docker.internal\n   xdebug.start_with_request = yes\n   xdebug.discover_client_host = true\n   ```"},{"id":"dev__code_flow","title":"Dev  Code Flow","body":"![Code Flow](..\/..\/images\/code_flow.png)"},{"id":"dev__output","title":"Developers Note: User Messages","body":"When working on this project, never `echo` directly.\n\n## Extension Authors\n\nFor messages related to a test, you must use `$test->addToVariables(...` because the timing of the output will be handled by the runner. **You must not use a printer from within handlers or custom extensions!**\n\nIn some cases you may want to display your messages sooner than later, if so you may call `$test->echoMessages()`. Not this will print all test messages, including those set so far in the processing. This ensures FIFO.\n\nFor output initiated from inside non-test event handlers, you may use `$runner->echo()` for real time printing.\n\n## Core Authors\n\nFollow the code as shown below for user feedback. The instance of `\\AKlump\\Messaging\\MessengerInterface` will determine how the messages are printed, you just worry about the message, level, and verbosity as you write code.\n\n```php\n\/\/ INFO MESSAGE\n$printer->deliver(new Message(\n  [\n    'This is a two-line\",\n    \"info message.',\n  ],\n));\n\n\/\/ NOTICE MESSAGE\n$printer->deliver(new Message(\n  [\n    'This is an notice.',\n    '',\n  ],\n  \\AKlump\\Messaging\\MessageType::SUCCESS,\n));\n\n\/\/ ERROR MESSAGE\n$printer->deliver(new Message(\n  [\n    'This is an error message with an extra line break.',\n    '',\n  ],\n  \\AKlump\\Messaging\\MessageType::ERROR,\n));\n\n\/\/ VERBOSE, INFO\n$printer->deliver(new Message(\n  [\n    'This is a debug message that will show with (A)ny verbosity.',\n  ],\n  \\AKlump\\Messaging\\MessageType::DEBUG,\n  new \\AKlump\\CheckPages\\Output\\VerboseDirective('D')\n));\n\n\/\/ or it's shorthand...\n$printer->deliver(new \\AKlump\\CheckPages\\Output\\DebugMessage(\n  [\n     'Demo debug message',\n     '',\n    'This is a debug message that will show with (A)ny verbosity.',\n  ],\n));\n```\n\nYou will need an instance of `\\AKlump\\Messaging\\MessengerInterface`, e.g.,\n\n```php\n$printer = new \\AKlump\\CheckPages\\Output\\ConsoleEchoPrinter($runner->getOutput());\n```"},{"id":"development","title":"Developing Check Pages Locally","body":"If you want to fork and develop check pages locally and use the fork in other local projects. You should setup as described on this page.\n\n1. Establish a local copy of check_pages.\n2. Use something like the following in your project that references the local fork, i.e., `\"$HOME\/Code\/Packages\/php\/check-pages\/check_pages\"`\n\n```shell\n(cd \"$app_root\" && \"$HOME\/Code\/Packages\/php\/check-pages\/check_pages\" run .\/tests_check_pages\/runner.php --dir=.\/tests_check_pages $@)\n```"},{"id":"events","title":"Events","body":"## Event Subscriber Services\n\n1. Create a service class that implements `\\Symfony\\Component\\EventDispatcher\\EventSubscriberInterface`\n2. Add it to _services.yml_; tag it with `{ name: event_subscriber }`\n3. See the `continue` service for an example.\n\n## All Events in Execution Order\n\n{% include('_event_list.md') %}\n\n## Writing a Dynamic Import\n\nIn this example a \"shorthand\" is built that can expand to multiple tests.\n\n```php\nrespond_to(\\AKlump\\CheckPages\\Event::SUITE_STARTED, function (\\AKlump\\CheckPages\\Event\\SuiteEventInterface $event) {\n  $suite = $event->getSuite();\n  foreach ($suite->getTests() as $test) {\n    $config = $test->getConfig();\n\n    \/\/ Look for the shorthand: \"http.methods_not_allowed\".  Remember this runs\n    \/\/ before the configuration is validated, so shorthand is free to take any\n    \/\/ form, and doesn't have to match the schema.\n    if (isset($config['http']['methods_not_allowed'])) {\n\n      \/\/ Now that we've found it, we will replace the \"test\" with the multiple\n      \/\/ tests that we generate in array_map().\n      $suite->replaceTestWithMultiple($test, array_map(function ($method) use ($config) {\n\n        \/\/ This is a single, expanded-from-shorthand test configuration.\n        return [\n          'why' => sprintf('Assert %s returns 405: Method Not Allowed', $method),\n          'url' => $config['url'],\n          'request' => ['method' => $method],\n          'status' => 405,\n        ];\n      }, $config['http']['methods_not_allowed']));\n    }\n  }\n});\n```"},{"id":"ex__ssl","title":"Ex  Ssl","body":"```yaml\n-\n  why: Test certain anonymous pages are SSL.\n  url: http:\/\/www.website.com\n  find:\n    -\n      javascript: window.location.protocol\n      is: 'https:'\n```"},{"id":"files","title":"File Output","body":"File output is enabled in the runner configuration file. Two things are required to enable this feature:\n\n1. An existing, writeable directory\n2. An entry in the runner config with the location of the directory as a resolvable path.\n\n```yaml\nfiles: logfiles\/dev\n```\n\nOnce you have this enabled, handlers will make use of this directory by writing different files related to the testing.\nWhen a suite is run, a subdirectory is created within the directory defined by the configuration."},{"id":"deep__organizing","title":"Filenaming and Organization","body":"Given the scenario of a live server, a test server, and a local, development server, you will create three config files respective to each environment.\n\n```\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dev.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 live.yml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test.yml\n```\n\nThen you will create some suites that are to be run on all environments\n\n```\n\u2514\u2500\u2500 suites\n    \u251c\u2500\u2500 bar.yml\n    \u251c\u2500\u2500 baz.yml\n    \u2514\u2500\u2500 foo.yml\n```\n\nBut let's say you have a suite that should only be run against the live environment. Here's an example that tests proper redirection and SSL prefixing and requires that the `url` values be absolute links. By definition then this suite should only run against a single server.\n\n```yaml\n-\n  why: Assert canonical, secure does not redirect.\n  visit: https:\/\/www.mysite.org\n  status: 200\n  location: https:\/\/www.mysite.org\n-\n  loop:\n    - http:\/\/www.mysite.org\n    - https:\/\/mysite.org\n    - http:\/\/mysite.org\n-\n  why: Assert ${loop.value} redirects to SSL, canonical.\n  visit: ${loop.value}\n  status: 301\n  location: https:\/\/www.mysite.org\n-\n  end loop:\n\n```\n\nTo keep this clear adhere to the following convention.\n\n### Step One\n\n**Prefix the suite with the config filename, e.g. _live.redirects.yml_.**\n\n```\n\u2514\u2500\u2500 suites\n    ...\n    \u251c\u2500\u2500 bar.yml\n    \u251c\u2500\u2500 baz.yml\n    \u251c\u2500\u2500 dev.redirects.yml\n    \u251c\u2500\u2500 foo.yml\n    \u251c\u2500\u2500 live.redirects.yml\n    \u2514\u2500\u2500 test.redirects.yml\n```\n\n### Step Two\n\n**List these as `suites_to_ignore` in the appropriate config files.  Use globbing for simplicity.**\n\nIn _config\/dev.yml_:\n\n```yaml\nsuites_to_ignore:\n  - live.*\n  - test.*\n```\n\nIn _config\/live.yml_:\n\n```yaml\nsuites_to_ignore:\n  - dev.*\n  - test.*\n```\n\nIn _config\/test.yml_:\n\n```yaml\nsuites_to_ignore:\n  - dev.*\n  - live.*\n```\n\n## Why Not Use Groups?\n\nIn my experience groups (folders) should not be used to indicate configuration-specific suites, but there is nothing technically stopping this strategy."},{"id":"cheatsheet","title":"Getting Started","body":"---\nid: cheatsheet\n---\n## Does a Page Load?\n\n```yaml\n-\n  visit: \/foo\n```\n\n## Is the Status Code Correct?\n\nBy saying that the \"page loads\", we mean that it returns a status code of 200. The following is exactly the same in function as the previous example. You can assert any HTTP status code by changing the value of `status`.\n\n```yaml\n-\n  visit: \/foo\n  status: 200\n```\n\n## Does the Page Have Certain Content?\n\nOnce loaded you can also look for things on the page with `find`. The most simple `find` assertion looks for a substring of text anywhere on the page. The following two examples are identical assertions.\n\n```yaml\n-\n  visit: \/foo\n  find:\n    - Upcoming Events Calendar\n```\n\n```yaml\n-\n  visit: \/foo\n  find:\n    -\n      contains: Upcoming Events Calendar\n```\n\nEnsure something does NOT appear on the page like this:\n\n```yaml\n-\n  visit: \/foo\n  find:\n    -\n      not contains: \"[token:123]\"\n```"},{"id":"handlers","title":"Handlers: Full Customization","body":"# Handlers\n\n## Using Composer Dependencies\n\n1. Inside the handler folder require your dependency with the `--no-install` flag.\n2. Do not add _HANDLER\/composer.lock_ to the repo, nor _HANDLER\/vender\/_.\n3. Add your handler's _composer.json_ path to the `\/extra\/merge-plugin\/require` array.\n4. Run `composer update`.\n\n## Proper Use of Letter Case\n\nConfiguration keys provided by handlers should be lower-cased, space-separated in keeping with human-like syntax. See `pixel ratio` below for an example.\n\n**Do not make them mixed- or snake-case.**\n\n```yaml\n-\n  why: Demonstrate testing against a \"retina\" display\n  url: \/test_subject.html\n  device:\n    pixel ratio: 2\n```\n\n@todo Below here is old, needs update.\n\n---\n\n## How it Looks\n\n_How it looks is myriad and you must refer to the handler code to determine how it's implemented when writing tests._\n\n## Explained\n\nThis is the most involved method of extending Check Pages, and offers the greatest control as well.\n\n@todo Where do I put these as an end user?\n\n## Creating a Handler\n\n1. Create a unique folder in _handlers_ with the following structure. In this example the new handler will be called `foo_bar`.\n\n   ```\n   handlers\n   \u2514\u2500\u2500 foo_bar\n       \u251c\u2500\u2500 compile.php\n       \u251c\u2500\u2500 FooBar.php\n       \u251c\u2500\u2500 README.md\n       \u251c\u2500\u2500 schema.definitions.json\n       \u251c\u2500\u2500 schema.assertion.json\n       \u251c\u2500\u2500 schema.test.json\n       \u251c\u2500\u2500 src\n       \u2502\u00a0\u00a0 \u2514\u2500\u2500 Alpha.php\n       \u2514\u2500\u2500 suite.yml\n       \u2514\u2500\u2500 test_subject.html\n   ```\n\n1. Write the _suite.yml_ file which will be run against _test_subject.html, test_subject.php, test_subject.json_, etc\n2. Create _test_subject.html_ or _test_subject.php_ as needed to test _\n   suite.yml_.\n3. You may include more than one _test_subject.*_ file.\n4. _README.md_ is optional, but will be added to the Check Pages documentation when it's compiled and should be used to give examples of how the handler should be implemented.\n\n### Handler Objects\/Classes\n\n* Each handler will provide it's main class in the namespace `AKlump\\CheckPages\\Handlers` with an upper-camel case file matching it's id, e.g. _foo_bar\/FooBar.php_.\n* Any additional classes should be namespaced to the handler, e.g. `AKlump\\CheckPages\\Handlers\\FooBar` and saved to _foo_bar\/src\/Alpha.php_`.\n\n## Extending the JSON Schema for Suite Validation\n\nThe handler may provide schema with any of the following files:\n\n1. _my_handler\/schema.definitions.json_\n2. _my_handler\/schema.test.json_\n3. _my_handler\/schema.assertion.json_\n\n_(Inspect handlers to see how these are used. Be aware that some properties are reserved and added automatically, i.e., `why`, `extra`; you should not add these in your handler. Here are some examples.)_\n\n```yaml\n# file: schema.assertion.json\n```\n\n```json\n{\n    \"type\": \"object\",\n    \"required\": [\n        \"foo\"\n    ],\n    \"properties\": {\n        \"foo\": {\n            \"$ref\": \"#\/definitions\/dom__dom\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n```yaml\n# file: schema.assertion.json\n```\n\n```json\n{\n    \"js_eval\": {\n        \"type\": \"string\",\n        \"pattern\": \".+\",\n        \"examples\": [\n            \"location.hash\"\n        ]\n    }\n}\n```\n\n## Disabled\n\nIf you rename a handler directory with a leading underscore, e.g. \"foo\" to \"_foo\" then it will be ignored. This is a \"disabled handler\".\n\n## Advanced\n\nThe _json_schema_ handler is a good example of a handler that totally handles the assertion on it's own. You may want to study that if you need to do something fancy.\n\n## Testing Handlers\n\nTo run a handler's tests do this: `.\/bin\/run_handler_tests `.  (Don't forget to `.\/bin\/compile_app.sh` if you make a change.)\n\n## Compiled Files\n\nDo not edit the following, as they are created in the build step and will be overwritten. To affect these files you need to look to _handlers\/_\ndirectory, which contains the source code.\n\n```\n.\n\u251c\u2500\u2500 tests\n\u2502     \u251c\u2500\u2500 handlers\n\u2502     \u2502     \u251c\u2500\u2500 foo.yml\n\u2502     \u2502     \u2514\u2500\u2500 javascript.yml\n\u2502     \u251c\u2500\u2500 handlers_runner.php\n\u2514\u2500\u2500 web\n    \u2514\u2500\u2500 handlers\n        \u251c\u2500\u2500 foo.html\n        \u2514\u2500\u2500 javascript.html\n\n```\n\n## Unique Compilation\n\nIf your handler needs to do something unique during compilation, such as provide extra files, it can implement _compile.php_. Look for class constants in `\\AKlump\\CheckPages\\CheckPages` to use in your code: Here's an example from the _imports_ handler.\n\n```php\n# file: imports\/compile.php\n\n\/**\n * @file Copy over the imports files during compile.\n *\/\n\n\/\/ These variables are available:\n\n\/** @var array $handler *\/\n\/** @var string $output_base_dir *\/\n\n$source = $handler['path'] . '\/imports';\n$destination = \"$output_base_dir\/tests\/imports\";\n\nif (!is_dir($destination)) {\n  mkdir($destination, 0777, TRUE);\n}\ncopy(\"$source\/_headings.yml\", \"$destination\/_headings.yml\");\ncopy(\"$source\/_links.yml\", \"$destination\/_links.yml\");\n\nforeach ([\n           \"$destination\/_headings.yml\",\n           \"$destination\/_links.yml\",\n         ] as $path) {\n  if (!file_exists($path)) {\n    return FALSE;\n  }\n  $data = file_get_contents($path);\n  $data = str_replace(\\AKlump\\CheckPages\\CheckPages::FILENAME_HANDLERS_TEST_SUBJECT, $handler['id'], $data);\n  if (!file_put_contents($path, $data)) {\n    return FALSE;\n  }\n}\n```"},{"id":"code__modify_response_body","title":"How to Modify a Response Body","body":"This takes a JSON response and filters some values of a certain arrays. This was implemented as a mixin.\n\n_mixins\/filter_alerts.php_\n\n```php"},{"id":"custom_dirs","title":"How To Use A Custom Directory For Suite Files","body":"You may locate suite files in directories other than the main one, by registering those directories with the `add_directory()` function. After that `run_suite()` will also look for suite names in the added directory(ies).\n\n```php"},{"id":"php_version","title":"How to Use a Different PHP version than Default","body":"If you've installed Check Pages globally, you may find that you need to specify the exact PHP version that runs it, so that the dependencies that were installed are correct.\n\nThis will use the current PHP version of the shell:\n\n```shell\n$(which checkpages) run tests_check_pages\/test_content\/setup_runner.php\n```\n\nThis will use a specific PHP version, i.e. `$CHECK_PAGES_PHP`:\n\n```shell\nexport CHECK_PAGES_PHP=\"\/Applications\/MAMP\/bin\/php\/php7.4.33\/bin\/php\"\n\"$CHECK_PAGES_PHP\" $(which checkpages) run tests_check_pages\/test_content\/setup_runner.php\n```"},{"id":"config__suites_to_ignore","title":"Ignore Suites","body":"* Config items take this form `suite` or `group\/suite`."},{"id":"imports","title":"Imports: Static Abstraction","body":"[See plugin page.](@plugin_import)"},{"id":"install","title":"Installation Methods","body":"## Global Installation\n\n1. Add _dist\/bin_ to `$PATH`\n2. Run this with `checkpages`"},{"id":"interpolation","title":"Interpolation","body":"## Rules for Test Interpolation\n\n* The timing of interpolation can be tricky.\n* Since only handlers know what test keys they provide, they MUST handle interpolation on their own test keys.\n* You should set variables on the test, which will persist only for that test. `\\AKlump\\CheckPages\\Parts\\Test::variables()`\n* You should set variables on suite, which will persist across tests. `\\AKlump\\CheckPages\\Parts\\Suite::variables`\n* You may also want to use a throw-away instance such as is done in `\\AKlump\\CheckPages\\Handler\\LoopCurrentLoop::execute`\n* When a plugin interpolates test config, it should probably set the config so that the interpolated values are passed down the execution chain, e.g. taken from the Request plugin:\n\n    ```php\n    function (TestEventInterface $event) {\n      $test = $event->getTest();\n      $this->config = $test->getConfig();\n      $test->interpolate($this->config['request']);\n      $test->setConfig($this->config);\n    }\n    ```\n\n### Example Implementations\n\n* `\\AKlump\\CheckPages\\Handler\\Value`\n* `\\AKlump\\CheckPages\\Handler\\Request`\n\n## Provide Variables from Configuration Files\n\nYou may set (global) variables in configuration, which may be interpolated by all suites and tests, by using the `variables` root-level key, like this:\n\n```yaml\nvariables:\n  foo_name: bar_value\n```"},{"id":"javascript","title":"Javascript","body":"## Javascript Testing Requirements\n\n* Your testing machine must have Chrome installed.\n\n## Enable Javascript per Test\n\nUnless you enable it, or in the case the selector type (i.e., `style`\n, `javascript`) requires it, javascript is not run during testing. If you need\nto assert that an element exists, which was created from Javascript (or\notherwise need javascript to run on the page), you will need to indicate the\nfollowing in your test, namely `js: true`.\n\n```yaml\n-\n  visit: \/foo\n  js: true\n  find:\n    -\n      dom: .js-created-page-title\n      text: Javascript added me to the DOM!\n```\n\n## Asserting Javascript Evaluations\n\nLet's say you want to assert the value of the URL fragment. You can do that with\nthe `javascript` selector. The value of `javascript` should be the expression to\nevaluate, once the page loads. Notice that you may omit the `js: true` as it\nwill be set automatically.\n\n```yaml\n-\n  visit: \/foo\n  find:\n    -\n      javascript: location.hash\n      is: \"#top\"\n```\n\n## Javascript Testing Related Links\n\n* [Chrome DevTools Protocol 1.3](https:\/\/chromedevtools.github.io\/devtools-protocol\/1-3\/)\n* [Learn more](https:\/\/developers.google.com\/web\/updates\/2017\/04\/headless-chrome)\n* [CLI parameters](https:\/\/source.chromium.org\/chromium\/chromium\/src\/+\/master:headless\/app\/headless_shell_switches.cc)\n* [More on parameters](https:\/\/developers.google.com\/web\/updates\/2017\/04\/headless-chrome#command_line_features)\n* https:\/\/github.com\/GoogleChrome\/chrome-launcher\n*\n* https:\/\/raw.githubusercontent.com\/GoogleChrome\/chrome-launcher\/v0.8.0\/scripts\/download-chrome.sh"},{"id":"dev__http","title":"Making HTTP Requests in Your Custom Code","body":"Here's how to use the built-in HTTP Client. As you can see you will need a `$runner` and a `$test` instance.\n\n```php\n$http_client = new HttpClient($runner, $test);\n$response = $http_client\n  ->dispatchEventsWith($test)\n  ->setWhyForNextRequestOnly('Lorem ipsum dolar')\n  ->sendRequest(new Request('get', '\/foo\/bar'));\n```\n\nYou can do like the following, however events will not be fired, so BE CAREFUL using this pattern.\n\n```php\n$http_client = new HttpClient($runner, $test);\n$response = $http_client\n  ->sendRequest(new Request('get', '\/foo\/bar'));\n```\n\nAn example with `Cookie` header as well as getting the driver, then location.\n\n```php\n$http_client->sendRequest(new Request('get', $url, ['Cookie' => $this->getSessionCookie()]));\n$location = $this->httpClient->getDriver()->getLocation()\n```\n\nThe messages can be delivered like this:\n\n```php\n$delivery = new \\AKlump\\CheckPages\\Output\\MessageDelivery();\n$delivery($runner->getMessenger(), $runner->getMessages());\n$runner->setMessages([]);\n```"},{"id":"code__add_test_option","title":"Mixin Code Example","body":"_runner.php_\n\n```php\nadd_mixin('bulk_delete');\n```\n\n_bulk_delete.php_\n\n```php"},{"id":"mixins","title":"Mixins: Shared Code Between Runners","body":"## How it Looks\n\n```yaml\n# file: runner.php\nadd_mixin('my_custom_mixin');\n```\n\n> When you want to share code across runners, you should look to _mixins_. Often you will want to put your runner function implementations inside a mixin file.\n\n## Explained\n\nAnother way to extend _Check Pages_ is to use the `add_mixin()` function. This method is easier and faster than writing a plugin. It is a simple means to share runner customization across different runners, or even projects. This is the basis for the authentication providers shipped with Check Pages.\n\n```text\n.\n\u2514\u2500\u2500 cp_tests\n    \u251c\u2500\u2500 mixins\n    \u2502   \u2514\u2500\u2500 foo.php\n    \u251c\u2500\u2500 runner.php\n    \u2514\u2500\u2500 suite.yml\n```\n\n1. Create a directory to contain one or more mixin files. This can be located within any resolvable directory. (See `\\AKlump\\CheckPages\\Parts\\Runner::resolve`.)\n2. In that directory create a file, whose filename will be used as the first argument to `add_mixin()`--the mixin \"name\". So for `add_mixin('mixins\/foo')` you should create _mixins\/foo.php_ as shown in the diagram above.\n3. In the runner file, make reference to the mixin, passing the configuration as expected by the mixin.\n    ```php\n    # file: runner.php\n\n    add_mixin('mixins\/foo', [\n      \"title\" => \"Lorem\",\n      \"color\" => \"blue\",\n    ]);\n    ...\n    ```\n4. The second argument, the configuration, is available in the mixin file, _mixins\/foo.php_ as `$config`.\n\n    ```php\n    # file: mixins\/foo.php\n\n    $title = $config['title'];\n    $color = $config['color'];\n\n    ```\n5. The runner instance `\\AKlump\\CheckPages\\Parts\\Runner` is available as `$runner`.\n6. You may use any of the _runner_functions.inc_ as you might otherwise do in a runner file.\n7. By convention, you may create an class named for the mixin in your file if necessary.\n8. You should add the namespace `AKlump\\CheckPages\\Mixins` to your mixin file.\n\n## Output\n\nYou may write output if desired, for example:\n\n```php\necho sprintf('Base URL is %s', config_get('base_url')) . PHP_EOL;\necho \\AKlump\\LoftLib\\Bash\\Color::wrap('blue', 'foo');\n```\n\n## Namespace\n\nAdd the `namespace` declaration at the top of your mixin file in this pattern: `AKlump\\CheckPages\\Mixins\\MIXIN_NAME`.\n\n```php"},{"id":"options","title":"Options: Configurable Abstraction","body":"@todo This needs to be rethought, now that we have shorthand.\n\n## How it Looks\n\n```yaml\n# file: suite.yml\n-\n  my_custom_option: 123\n```\n\n> Options are a step up from [imports](@imports) because they allow you to consolidate reusable code, while offering configuration via arguments, like a function. They are \"options with arguments\".\n\n## Explained\n\nIf you need to do some fancy PHP transformations at certain points of test execution, you can hook into that flow using one or more custom test options.  **These are nothing more than functions attached to events.** In the following example, `foo` is the custom test option under study.\n\n```yaml\n# file: suite.yml\n-\n  visit: \/index.html\n  foo: 123\n  find:\n    -\n      dom: h1\n      is: Hello World!\n```\n\nThe `add_test_option()` function allows you to add customization at the level of your runner file.\n\n```php\n# file: runner.php\nadd_test_option('foo', [\n  Event::TEST_CREATED => function ($option, $event){\n    \/\/ Note, $option === 123\n  },\n]);\n```\n\nThe first argument defines the option as it will be used in the suite file, e.g., `foo`. The second argument is an array of callbacks, keyed by one or more of these methods:\n\n{% include('_event_list.md') %}\n\nThese examples show how `$option` can have non-scalar values.\n\n```yaml\n-\n  bar:\n    - do\n    - re\n    - mi\n  baz:\n    lorem: ipsum dolar\n```\n\n```php\nadd_test_option('bar', [\n  Event::TEST_CREATED => function ($option, \\AKlump\\CheckPages\\Event\\TestEventInterface $event){\n    list($do, $re, $mi) = $option;\n    \/\/ ...\n  },\n  Event::REQUEST_CREATED => function ($option, \\AKlump\\CheckPages\\Event\\DriverEventInterface $event){\n    list($do, $re, $mi) = $option;\n    \/\/ ...\n  },\n]);\n\nadd_test_option('baz', [\n  Event::TEST_CREATED => function ($option, \\AKlump\\CheckPages\\Event\\TestEventInterface $event){\n    if ($option['lorem'] === 'ipsum dolar') {\n      \/\/ ...\n    }\n  },\n]);\n\nrun_suite('*');\n```\n\n## `Event::TEST_CREATED`\n\nThe `Event::TEST_CREATED` event is the best place to put custom processing if you want to hijack a \"test\". For example you could use it to set a bunch of custom variables. It's not a test, but a processor, in such a case.\n\n## Advance to Next Test\n\nIn some cases you may want to advance to the next test after you finish executing some code inside of `Event::TEST_CREATED` in your custom test option. That is to say, you want to mark the test (option) as passed\/complete and stop any further execution on that test config. To do this you should use the `\\AKlump\\CheckPages\\Traits\\PassFailTrait::setPassed()` method.\n\n```php\nadd_test_option('event.create', [\n  Event::TEST_CREATED => function ($option, \\AKlump\\CheckPages\\Event\\TestEventInterface $event) {\n\n    \/\/ ...\n\n    $event->getTest()->setPassed();\n  },\n]);\n```"},{"id":"phpstorm","title":"PhpStorm Integration","body":"You may use the _http_request_files_ mixin to export test suites as [HTTP Client](https:\/\/www.jetbrains.com\/help\/phpstorm\/http-client-in-product-code-editor.html) files.\n\nTo enable this add the following to your runner:\n\n```php\nadd_mixin('http_request_files', [\n  'single_file' => TRUE,\n  'exclude_passing' => TRUE,\n]);\n```\n\n* Each suite will create it's own file unless you set `single_file` to `TRUE`.\n* Set `exclude_passing` and only failing tests will be exported.\n\nEach time your run the suite, the file erased and rewritten.\n\n**Be careful with these files because they may contain session and other authentication information.**\n\n## Include Files\n\nIf you've globally installed check pages, you will not have autocomplete in PHP storm unless you reference that global installation.\n\nPHP > Include Path > DIR_TO_CHECKPAGES_INSTALLATION"},{"id":"setup","title":"Setup Before Test","body":"Some integration testing requires that an environment exist in a given state before the tests can run. How can you ensure that the website is in that state before your test suite begins?\n\n## Server-Side Setup\n\nIn this strategy, you setup an endpoint that receives an ID representing a state. You then write server-side code to put your website into that state when it receives a request. How you write the server-side is up to you, and depends on the language, framework, etc. All you do on the Check Pages side of things is make a request to that appropriate endpoint at the beginning of your suite:\n\n```yaml\n# file: suite.yml\n-\n  visit: \/test-set-state.php?state=foo\n  ...\n\n```"},{"id":"shorthand","title":"Shorthand: Simpler, Cleaner, and More Readable","body":"## How it Looks\n\n```yaml\n# file: suite.yaml\n-\n  user: foo_user\n  item.delete: 123\n```\n\n> Shorthand is a way to simplify the reading and writing of your tests.\n\n## Explained\n\nWithout the custom shorthand, the above would have been written like this:\n\n```yaml\n# file: suite.yaml\n\n-\n  user: foo_user\n  url: \/api\/items\n  request:\n    method: delete\n    body: \"{id:123}\"\n  find:\n    -\n      path: result\n      is: deleted\n```\n\nHowever, by adding `item.delete` using `add_shorthand()`, we get the ability to write less code, which is less error-prone, and faster to reason about.\n\nHere's the runner implementation:\n\n```php\n# file: runner.php\n\nadd_shorthand('item.delete', function ($shorthand, \\AKlump\\CheckPages\\Parts\\Test $test) {\n  assert(is_numeric($shorthand));\n  $config = $test->getConfig();\n  $config['url'] = '\/api\/items';\n  $config['request'] = [\n    'method' => 'delete',\n    'body' => json_encode([\n      'id' => $shorthand\n    ]),\n  ];\n  $config['find'] = $config['find'] ?? [];\n  $config['find'][] = [\n    'path' => 'result',\n    'is' => 'deleted',\n  ];\n  $test->setConfig($config);\n});\n```\n\n## An Example with Multiple Replacement Tests\n\n```php\nadd_shorthand('json_factory', function ($shorthand, \\AKlump\\CheckPages\\Parts\\Test $test) use ($runner) {\n  assert(is_array($shorthand));\n  $config = $test->getConfig();\n  $path = $runner->getFiles()->tryResolveFile($shorthand['schema'], ['json'])[0];\n  $faker = new Faker($path);\n  $data = $faker->jsonSerialize();\n\n  foreach (($shorthand['values'] ?? []) as $key => $value) {\n    $data[$key] = $value;\n  }\n\n  $config['is'] = json_encode($data);\n\n  $test_configs = [];\n  $test_configs[] = $config;\n  $test_configs[] = [\n    'set' => $config['set'] . '.validationSchema',\n    'is' => json_encode($faker->getValidationSchema()),\n  ];\n  $test->getSuite()->replaceTestWithMultiple($test, $test_configs);\n});\n```\n\n## Preserve `$shorthand` for Later\n\nFollow this strategy if you need to keep the value of `$shorthand` in the test, for other event handlers or later processing of some sort. See [Stash](@stash) for more info.\n\n```php\n# file: runner.php\n\nadd_shorthand('foo', function ($shorthand, \\AKlump\\CheckPages\\Parts\\Test $test) {\n  $config = $test->getConfig();\n  $config['extras']['foo'] = $shorthand;\n  $test->setConfig($config);\n});\n```"},{"id":"skipping_tests","title":"Skipping Suites","body":"Some suites may not always be applicable, for example some suites rely on a set of content, which if not present does not indicate a failure.\n\nFor this situation you will want to indicate the that suite was skipped not that it failed.\n\nIt's simple, just use `on fail: skip suite`. Presumably you'd want to do this on the first test of the suite, however it will work on any test.\n\n```yaml\n-\n  js: true\n  url: \/calendar\n  on fail: skip suite\n  request:\n    timeout: 4\n  find:\n    -\n      dom: .fc-event\n```\n\n## Related Topics\n\n*"},{"id":"stash","title":"Stashing Values","body":"There is a special map key `extras` available on every test, which is ignored by the schema validator and can be used to stash\/retrieve arbitrary data by handlers and extension strategies throughout the testing process (and across event handlers).\n\nThe following example is taken from a mixin that had to move it's shorthand config to the stash and then act upon those values just before the request. You can see how `extras` is used to achieve this.\n\nIt's probably not a good idea to use the `extras` key directly when writing tests, as this is may not feel as clean or clear. Better to use `add_shorthand` as shown below.\n\nThis is how the test is written.\n\n```yaml\n-\n  why: 'Assert device d0 returns per schema.'\n  url: \/api\/2.0\/rest\/devices\/d0\n  query_auth:\n    count: 3\n```\n\n```php\nadd_shorthand('query_auth', function ($shorthand, \\AKlump\\CheckPages\\Parts\\Test $test) use ($mixin_config) {\n  $test_config = $test->getConfig();\n  $test_config['extras']['query_auth'] = $shorthand + $mixin_config;\n  $test->setConfig($test_config);\n});\n```\n\nNow the test has this structure, which will pass validation, yet still holds the data for retrieval.\n\n```yaml\n-\n  why: 'Assert device d0 returns per schema.'\n  url: \/api\/2.0\/rest\/devices\/d0\n  extras:\n    query_auth:\n      count: 3\n```\n\n```php\n$dispatcher = $runner->getDispatcher();\n$dispatcher->addListener(\\AKlump\\CheckPages\\Event::REQUEST_CREATED, function (\\AKlump\\CheckPages\\Event\\DriverEventInterface $event) {\n  $test_config = $event->getTest()->getConfig();\n  if (!empty($test_config['extras']['query_auth'])) {\n    query_auth_calculate($test_config, $event->getTest());\n  }\n});\n\n```"},{"id":"grouping","title":"Suite Groups","body":"It may be helpful to combine suites into groups.\n\nThis is done by placing one or more suites into a folder. A group is defined by the folder containing the suite file(s), where the folder is the group. That's it.\n\nYou can use the `--group=` to filter by group.\n\nGiven this example structure...\n\n```\n.\n\u2514\u2500\u2500 suites\n    \u251c\u2500\u2500 admin\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 status.yml\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 scenario1.yml\n    \u251c\u2500\u2500 api\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 crud.yml\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 scenario1.yml\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 scenario2.yml\n    \u2514\u2500\u2500 web_ui\n        \u251c\u2500\u2500 contact.yml\n        \u251c\u2500\u2500 footer.yml\n        \u2514\u2500\u2500 homepage.yml\n```\n\nSetup the runner like this:\n\n```php"},{"id":"suite_index","title":"Suite Index","body":"A file will be created in the log directory called _all_suites.yml_. It contains all the suites that were loaded by the runner file. You can use this for reference when, for example, adding `suites_to_ignore` to a runner configuration."},{"id":"forms__drupal","title":"Testing Forms","body":"## Drupal 8\n\nThe following is how you can test the contact form:\n\n```yaml\n-\n  why: Gather form info for next test.\n  visit: \/contact\n  find:\n    -\n      why: Capture form build ID to use in next POST test.\n      dom: '.contact-form [name=\"form_build_id\"]'\n      attribute: value\n      set: formBuildId\n    -\n      why: Capture form ID to use in next POST test.\n      dom: '.contact-form [name=\"form_id\"]'\n      attribute: value\n      set: formId\n    -\n      why: Capture submit button value to use in next POST test.\n      dom: '.contact-form [name=\"op\"]'\n      attribute: value\n      set: op\n    -\n      why: Capture honeypot_time to use in next POST test.\n      dom: '.contact-form [name=\"honeypot_time\"]'\n      attribute: value\n      set: honeypotTime\n\n-\n  why: Prevent honeypot module from invalidating submission.\n  sleep: 3\n\n-\n  why: Assert contact form stays on \/contact after successful submission.\n  visit: \/contact\n  request:\n    method: POST\n    headers:\n      Content-Type: application\/x-www-form-urlencoded\n    body: form_id=${formId}&form_build_id=${formBuildId}&op=${op}&honeypot_time=${honeypotTime}&name=Alpha&mail=alpha@foo.com&message[0][value]=lorem%20ipsum\n  find:\n    -\n      dom: 'meta[property=\"og:url\"]'\n      attribute: content\n      matches: \/\\\/contact$\/\n    -\n      why: Assert no form messages were triggered.\n      dom: .message[data-level=\"error\"]\n      count: 0\n\n```\n\n## Proposed Shorthand\n\nNot yet developed.\n\n```yaml\n-\n  url: \/contact\n  form:\n    -\n      name: name\n      value: Alpha\n    -\n      name: mail\n      value: alpha@foo.com\n    -\n      name: message[0][value]\n      value: lorem ipsum\n```"},{"id":"testing_legacy","title":"Testing Legacy Sites","body":"If your website project uses Composer but is less than the minimum requirments for this package, then you cannot install this package in your project as an additional Composer dependency.\n\n1. Use composer to install it on a server with the proper requirements, in this example it was installed at _\/Users\/aklump\/Code\/Packages\/php\/check-pages_\n2. Create a file in your app in _.\/bin\/run_check_pages.sh_\n3. Add the code as shown below.\n4. Execute testing with `.\/bin\/run_check_pages.sh`\n\n```text\n.\n\u251c\u2500\u2500 bin\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 run_check_pages.sh\n\u2514\u2500\u2500 tests_check_pages\n```\n\n```shell\n#!\/bin\/bash\n\n#\n# @file\n# Wrapper for aklump\/check-pages for local testing.\n#\n\nsource=\"${BASH_SOURCE[0]}\"\nwhile [ -h \"$source\" ]; do # resolve $source until the file is no longer a symlink\n  dir=\"$(cd -P \"$(dirname \"$source\")\" && pwd)\"\n  source=\"$(readlink \"$source\")\"\n  [[ $source != \/* ]] && source=\"$dir\/$source\" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located\ndone\nroot=\"$(cd -P \"$(dirname \"$source\")\" && pwd)\"\n\ncd \"$root\/..\/tests_check_pages\" && \/Users\/aklump\/Code\/Packages\/php\/check-pages\/check_pages run runner.php $@\n```"},{"id":"matches","title":"The Power of Matches","body":"The following example shows how you can use `matches` to capture the user ID from the `href` of an element on the page.\n\nWhen you combine `matches` with `set` the value that is set is equal to the matched portion.\n\nHowever, if you add groups to your RegEx, the set value is going to be the last group matched, that is the results array item with the highest numeric key. That is why the code below works, because we capture the user ID as `$matches[1]` and thus `newUserId` would not be `user\/123` but rather `123`.\n\n```yaml\n- why: Capture UID of the new user.\n  user: site_test.admin\n  url: \/admin\/people\n  find:\n    - dom: .dropbutton__item>a\n      attribute: href\n      matches: '#\\\/user\\\/(\\d+)\\\/#'\n      set: newUserId\n\n- why: Assert membership date was updated correctly.\n  user: site_test.admin\n  url: \/user\/${newUserId}\/edit\n  find:\n    - dom: .t-field_membership_expires\n      attribute: value\n      matches: '#^\\d{4}\\-10\\-20$#'\n```"},{"id":"multiple_dom_elements","title":"Understanding How Multiple DOM Elements Are Handled","body":"In this example you see three `` elements on _index.html_.\n\n```html\n\nalpha\nbravo\ncharlie\n\n```\n\nWhen using the `dom` selector, we get back three headings; using these more specific `xpath` selectors (see below), we get back only one.  Therefore the important thing to fully comprehend when writing tests is:\n\n**Given more than one DOM element, `matches, contains, etc` will pass when at least ONE element passes.**\n\n**In the same case, `not matches, not contains, etc` will ONLY pass if ALL of them pass.**\n\nWith that in mind, a passing test for the above HTML would look like this:\n\n```yaml\n-\n  visit: \/index.html\n  find:\n    -\n      dom: 'h2'\n      matches: '\/charlie\/i'\n    -\n      dom: 'h2'\n      not matches: '\/delta\/i'\n    -\n      dom: '\/\/*h2[1]'\n      not matches: '\/charlie\/i'\n    -\n      dom: '\/\/*h2[2]'\n      not matches: '\/charlie\/i'\n    -\n      dom: '\/\/*h2[3]'\n      matches: '\/charlie\/i'\n```"},{"id":"unit_tests","title":"Unit Tests","body":"Currently the way the handler autoloading works, the unit tests do not have access to those classes, therefor if you write a unit test you need to manually add to the `autoload-dev` array in _composer.json_."},{"id":"why","title":"Using `why` For Better Clarity","body":"The test suite output will automatically generate a line for each assertion, which in many cases is sufficient for test readability. However you may use the `why` key in your tests if you wish. This serves two purposes, it makes the tests more clear and readable, and it makes the test output more understandable, and especially if you're trying to troubleshoot a failed assertion.\n\n# At the Test Level\n\nYou may attach `why` to a test, like this...\n\n```yaml\n-\n  why: Assert homepage has lorem text.\n  url: \/index.php\n  find:\n    - Lorem ipsum.\n```\n\n```\n\u23f1  RUNNING \"SUITE\" SUITE...\n\ud83d\udd0e Assert homepage has lorem text.\n\ud83d\udc4d http:\/\/localhost:8000\/index.php\n\u251c\u2500\u2500 HTTP 200\n\u251c\u2500\u2500 Find \"Lorem ipsum\" on the page.\n\u2514\u2500\u2500 Test passed.\n```\n\n# At the Assert Level\n\n... or to any assertion, like this:\n\n```yaml\n-\n  url: \/index.php\n  find:\n    -\n      dom: h1\n      why: Assert page title is lorem text.\n      text: Lorem ipsum\n```\n\n```\n\u23f1  RUNNING \"SUITE\" SUITE...\n\ud83d\udc4d http:\/\/localhost:8000\/index.php\n\u251c\u2500\u2500 HTTP 200\n\u251c\u2500\u2500 Assert page title is lorem text.\n\u2514\u2500\u2500 Test passed.\n```"},{"id":"lando","title":"Using With Lando","body":"If you get a sockets nto installed error add this:\n\n```yaml\nservices:\n    build_as_root:\n      - apt-get update\n      - apt-get install -y autoconf\n      - docker-php-ext-install sockets\n```\n\n* https:\/\/github.com\/lando\/docs\/issues\/62#issuecomment-578870310"},{"id":"variables","title":"Variables","body":"* The user ID of the authenticated user is available to your suite as `${id}`.\n* You can capture the value of h1 into a variable as `${title}` and used in a subsequent test.\n* With javascript you can read the url into `${url}` and assert against it.\n\nAll of these are examples of variables.\n\n## Sharing Values Between Tests\n\nYou create variables like this:\n\n```yaml\n-\n  set: title\n  value: 'Lorem Ipsum'\n```\n\nWhich can be used like this:\n\n```yaml\n-\n  set: title\n  value: 'Lorem Ipsum'\n-\n  visit: \/foo.html\n  find:\n    -\n      dom: h1\n      is: ${title}\n```\n\n**Note: Interpolation will only occur if the variable exists.** That means that in the following example, the second assert will assert against the literal value `${other}`.\n\n```yaml\n-\n  set: title\n  value: 'Lorem Ipsum'\n-\n  visit: \/foo.html\n  find:\n    -\n      dom: h1\n      is: ${title}\n    -\n      dom: h2\n      is: ${other}\n```\n\n## Using Response Values\n\nIn this example we'll `GET` a resource ID and store it using `set`, then `DELETE` it in a subsequent test using interpolation.\n\n```yaml\n-\n  visit: \/api\/2\/foo\n  find:\n    -\n      node: collection.items.data.0.id\n      set: fooId\n\n-\n  url: \/api\/2\/foo\/${fooId}\n  request:\n    method: delete\n  status: 204\n```\n\n## Scope\n\nVariables used this way are scoped to the suite. They can be shared across tests and assertions, but not across suites.\n\n## Variable Re-Assignment\n\nThe authentication plugin will create `${user.uid}`, however it will be overwritten on the next authentication. To capture and reassign to a different variable name do like the following:\n\n```yaml\n-\n  why: Capture UID from session for reassignment\n  user: foo_user\n  visit: \/\n\n-\n  why: Reassign to authenticated user ID to variable fooUserId\n  set: fooUserId\n  value: ${user.uid}\n\n-\n  why: Assert the title of Foo's user page is correct.\n  visit: \/user\/${fooUserId}\n  find:\n    -\n      dom: h1\n      text: Foo User\n```"},{"id":"expected_outcome","title":"When You _Want_ Failure","body":"There are some cases where you want to write a suite that fails, and such a result indicates the desired outcome. That's where `expected outcome: failure` comes into play.\n\nIf _bar.html_ does not exist then this test will fail. And the suite will fail. But I only want to know if this particular test **doesn't** fail, so I will add `expected outcome: failure`, which inverts the test result.\n\n```yaml\n- url: \/bar.html\n  expected outcome: failure\n```"}]
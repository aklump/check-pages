<?php

namespace AKlump\CheckPages\Plugin;

use AKlump\LoftLib\Code\Strings;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\Yaml\Yaml;

final class PluginsCompiler {

  /**
   * @var string
   */
  private $masterSchemaPath;

  /**
   * @var \AKlump\CheckPages\Plugin\PluginsManager
   */
  private $pluginsManager;

  /**
   * @var array
   */
  private $schema;

  /**
   * @var string
   */
  private $examplesPath;

  /**
   * @var string
   */
  private $generatedSchemaPath;

  /**
   * @var string
   */
  private $masterComposerJsonPath;

  /**
   * @var string
   */
  private $generatedComposerJsonPath;


  /**
   * PluginsCompiler constructor.
   *
   * @param \AKlump\CheckPages\Plugin\PluginsManager $plugins_manager
   * @param string $master_schema_path
   * @param string $generated_schema_path
   * @param string $master_services_path
   * @param string $generated_services_path
   * @param string $master_composer_json_path
   * @param string $generated_composer_json_path
   * @param string $examples_path
   */
  public function __construct(
    PluginsManager $plugins_manager,
    string $master_schema_path,
    string $generated_schema_path,
    string $master_services_path,
    string $generated_services_path,
    string $master_composer_json_path,
    string $generated_composer_json_path,
    string $examples_path
  ) {
    $this->pluginsManager = $plugins_manager;

    $this->masterServicesPath = $master_services_path;
    $this->generatedServicesPath = $generated_services_path;
    $this->masterComposerJsonPath = $master_composer_json_path;
    $this->generatedComposerJsonPath = $generated_composer_json_path;
    $this->services = Yaml::parseFile($this->masterServicesPath);

    $this->masterSchemaPath = $master_schema_path;
    $this->schema = ['readyOnly' => TRUE] + $this->loadJson($master_schema_path);
    $description = $this->schema['description'] ?? '';
    $description .= '  DO NOT EDIT THIS FILE.  AUTO-GENERATED FROM ' . basename($master_schema_path);
    $this->schema = array_filter([
        '$schema' => $this->schema['$schema'] ?? NULL,
        'title' => $this->schema['title'] ?? NULL,
        'description' => trim($description),
      ]) + $this->schema;

    $this->generatedSchemaPath = $generated_schema_path;
    $this->examplesPath = $examples_path;
  }

  /**
   * Compile all plugins into the app.
   */
  public function compile() {
    $plugins = $this->pluginsManager->getAllPlugins();
    foreach ($plugins as &$plugin) {
      $this->compilePlugin($plugin);
    }
    $this->createTestRunnerPhpFile($plugins);
    $this->generateServicesFile();
    $this->updateComposerJson();

    // This has to come last so plugins may affect the compile files.
    foreach ($plugins as &$plugin) {
      if (file_exists($plugin['path'] . '/compile.php')) {
        $plugin_dir = $plugin['path'];
        $compile_dir = $this->examplesPath;
        $result = require $plugin['path'] . '/compile.php';
        if (!$result) {
          throw new \RuntimeException(sprintf("Compilation failed in %s.", $plugin['path'] . '/compile.php'));
        }
      }
    }
  }

  private function createTestRunnerPhpFile($plugins) {
    $runner_code = [
      '<?php',
      "/** AUTOGENERATED DO NOT EDIT */",
      "add_directory(__DIR__);",
      "load_config('config/local');",
      "add_mixin('phpstorm.http');"
    ];

    foreach ($plugins as $plugin) {
      if ($plugin['has_tests']) {
        $runner_code[] = "run_suite('plugins/{$plugin['id']}');";
      }
    }
    $runner_file_path = $this->examplesPath . '/tests/runner_plugins.php';
    $result = file_put_contents($runner_file_path, implode(PHP_EOL, $runner_code));
    if (!$result) {
      throw new \RuntimeException(sprintf('Cannot create runner file: %s', $runner_file_path));
    }
  }

  /**
   * Compile the plugin schema file.
   *
   * @param string $id
   *   The plugin ID.
   * @param string $path_to_plugin
   *   The filepath to the plugin definition directory.
   */
  private function compilePlugin(array &$plugin) {
    $this->compilePluginSchema($plugin['id'], $plugin['path']);
    $plugin['has_tests'] = $this->handleTests($plugin['id'], $plugin['path']);

    // Create a service if an event subscriber.
    $instance = $this->pluginsManager->getPluginInstance($plugin['id']);
    if ($instance instanceof EventSubscriberInterface) {
      $plugin_services = [
        'services' => [
          $plugin['id'] . '.plugin' => [
            'class' => '\\' . ltrim($plugin['classname'], '\\'),
            'tags' => [['name' => 'event_subscriber']],
          ],
        ],
      ];
      $this->services = array_merge_recursive($this->services, $plugin_services);
    }
  }

  private function ensureDir($filepath) {
    if (!is_dir($filepath)) {
      mkdir($filepath, 0755, TRUE);
    }
  }

  /**
   * Compile the plugin schema file.
   *
   * @param string $id
   *   The plugin ID.
   * @param string $path_to_plugin
   *   The filepath to the plugin definition directory.
   */
  private function handleTests(string $id, string $path_to_plugin) {
    $this->ensureDir($this->examplesPath . "/tests/plugins/");
    $this->ensureDir($this->examplesPath . "/web/plugins/");

    // Locate the file with the filename of 'test_subject'.
    $test_subject_basename = array_values(array_filter(scandir($path_to_plugin), function ($path) {
      return pathinfo($path, PATHINFO_FILENAME) === 'test_subject';
    }))[0] ?? NULL;


    // Process path changes in server file and copy to web server.
    if ($test_subject_basename) {
      $extension = pathinfo($test_subject_basename, PATHINFO_EXTENSION);
      $final_basename = "plugins/$id.$extension";
      $test_subject_contents = file_get_contents("$path_to_plugin/$test_subject_basename");
      $test_subject_contents = str_replace($test_subject_basename, $final_basename, $test_subject_contents);
      file_put_contents($this->examplesPath . "/web/$final_basename", $test_subject_contents);
    }

    $plugin_provides_tests = file_exists($path_to_plugin . '/suite.yml');

    // Process path changes YAML suite file and copy.
    if ($plugin_provides_tests) {
      $suite_raw_contents = file_get_contents("$path_to_plugin/suite.yml");
      if (!empty($final_basename)) {
        $suite_raw_contents = str_replace($test_subject_basename, $final_basename, $suite_raw_contents);
      }
      $plugin_suite = Yaml::parse($suite_raw_contents);
      file_put_contents($this->examplesPath . "/tests/plugins/$id.yml", Yaml::dump($plugin_suite, 6));
    }

    return $plugin_provides_tests;
  }

  /**
   * Add autoloading to composer.json for plugins.
   *
   * @return void
   */
  private function updateComposerJson() {
    $unique = function (array &$array) {
      $array = array_unique($array);
    };
    $json = json_decode(file_get_contents($this->masterComposerJsonPath), TRUE);
    $json['autoload']['psr-4']['AKlump\CheckPages\Plugin\\'] = [];
    $plugins = $this->pluginsManager->getAllPlugins();
    foreach ($plugins as $plugin) {
      $json['autoload']['psr-4']['AKlump\CheckPages\Plugin\\'][] = 'plugins/' . $plugin['id'] . '/';
      $unique($json['autoload']['psr-4']['AKlump\CheckPages\Plugin\\']);
      if (is_dir($plugin['path'] . '/src/')) {
        $psr_prefix = 'AKlump\CheckPages\Plugin\\' . Strings::upperCamel($plugin['id']) . '\\';
        $json['autoload']['psr-4'][$psr_prefix][] = 'plugins/' . $plugin['id'] . '/src/';
        $unique($json['autoload']['psr-4'][$psr_prefix]);
      }
      $composer_json = $plugin['path'] . '/composer.json';
      if (file_exists($composer_json)) {
        $composer_json = file_get_contents($composer_json);
        $plugin_json = json_decode($composer_json, TRUE);
        if (!$plugin_json) {
          throw new \RuntimeException(sprintf('Invalid contents in %s', $composer_json));
        }
        foreach (($plugin_json['require'] ?? []) as $package => $version) {
          if (empty($json['require'][$package])) {
            $json['require'][$package] = $version;
          }
          elseif ($json['require'][$package] !== $version) {
            throw new \RuntimeException(sprintf('Version conflict for package %s in %s', $package, $plugin['id']));
          }
        }
      }
    }
    ksort($json['require']);

    file_put_contents($this->generatedComposerJsonPath, json_encode($json, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT));
  }

  /**
   * Compile the plugin schema file.
   *
   * @param string $id
   *   The plugin ID.
   * @param string $path_to_plugin
   *   The filepath to the plugin definition directory.
   */
  private function compilePluginSchema(string $id, string $path_to_plugin) {
    if (isset($this->schema['definitions'][$id])) {
      throw new \RuntimeException(sprintf('Plugin ID conflict; %s.definitions.%s already exists', basename($this->masterSchemaPath), $id));
    }

    $before = md5(json_encode($this->schema));

    // The plugin MAY provide new scheme definitions.
    $definitions_schema = $path_to_plugin . '/schema.definitions.json';
    if (file_exists($definitions_schema)) {
      $definitions_schema = $this->loadJson($definitions_schema);
      $conflicting_keys = array_intersect_key($this->schema['definitions'], $definitions_schema);
      if ($conflicting_keys) {
        throw new \RuntimeException(sprintf('The following definitions exist in the master schema and cannot be added by the plugin %s: %s', $id, implode(', ', $conflicting_keys)));
      }
      $this->schema['definitions'] += $definitions_schema;
    }

    // The plugin MAY provide test-level schema.
    $test_schema = $path_to_plugin . '/schema.test.json';
    if (file_exists($test_schema)) {
      $test_schema = $this->loadJson($test_schema);
      $test_schema = $this->handleGlobalSchemaProperties($test_schema);
      $this->schema["items"]["anyOf"][] = $test_schema;
    }

    // The plugin must provide the assertion-level schema.
    $assertion_schema = $path_to_plugin . '/schema.assertion.json';
    if (file_exists($assertion_schema)) {
      $this->schema['definitions'][$id] = [
        'title' => Strings::title("$id Plugin Assertion"),
      ];
      $assertion_schema = $this->loadJson($assertion_schema);
      $assertion_schema = $this->handleGlobalSchemaProperties($assertion_schema);
      $this->schema['definitions'][$id] += $assertion_schema;
      $this->schema['definitions']['find']['oneOf'][1]['items']['oneOf'][] = [
        '$ref' => "#/definitions/$id",
      ];
    }

    if ($before !== md5(json_encode($this->schema))) {
      $this->saveJson($this->generatedSchemaPath, $this->schema);
    }

    // Update the schema in the plugins manager.
    $this->pluginsManager->setSchema($this->loadJson($this->generatedSchemaPath));
  }

  /**
   * Add global vars to a plugin's schema.
   *
   * @param array $schema
   *   The test or assertion schema defined by the plugin.
   *
   * @return array
   *   The schema with globals set.
   *
   * @throws \RuntimeException If the plugin provides any globals.
   */
  private function handleGlobalSchemaProperties(array $schema) {
    if (empty($schema['properties'])) {
      return $schema;
    }

    $globals = [
      'why' => '#/definitions/why',
      'extras' => '#/definitions/extras',
      'expected outcome' => '#/definitions/expected_outcome',
    ];

    $properties = [];
    foreach ($globals as $property => $ref) {
      if (isset($schema[$property])) {
        throw new \RuntimeException(sprintf('Your plugin schema must not include "%s".', $property));
      }
      $properties[$property] = [
        '$ref' => $ref,
      ];
    }

    // Move globals to the top.
    $schema['properties'] = $properties + $schema['properties'];

    return $schema;
  }

  private function loadJson(string $filepath): array {
    $data = json_decode(file_get_contents($filepath), TRUE);
    if (is_null($data)) {
      throw new \RuntimeException(sprintf('Invalid JSON in %s', $filepath));
    }

    return $data;
  }

  private function saveJson($filepath, $data) {
    $result = file_put_contents($filepath, json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
    if (!$result) {
      throw new \RuntimeException(sprintf('Could not save %s', $filepath));
    }

    return $this;
  }

  private function generateServicesFile() {
    $result = file_put_contents($this->generatedServicesPath, Yaml::dump($this->services, 4));
    if (!$result) {
      throw new \RuntimeException(sprintf('Could not save %s', $this->generatedServicesPath));
    }

    return $this;
  }

}

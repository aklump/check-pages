<?php

namespace AKlump\CheckPages;

use Symfony\Component\Yaml\Yaml;

final class PluginsCompiler {

  /**
   * PluginsCompiler constructor.
   *
   * @param string $plugins_dir
   * @param string $master_schema
   * @param string $examples_path
   */
  public function __construct(PluginsManager $plugins_manager, string $master_schema, string $examples_path) {
    $this->pluginsManager = $plugins_manager;
    $this->schemaPath = $master_schema;
    $this->examplesPath = $examples_path;
  }

  /**
   * Compile all plugins into the app.
   */
  public function compile() {
    $plugins = $this->pluginsManager->getFindPlugins();
    foreach ($plugins as $plugin) {
      $this->compilePlugin($plugin['id'], $plugin['path']);
    }
    $this->createTestRunnerPhpFile($plugins);
  }

  private function createTestRunnerPhpFile($plugins) {
    $runner_code = [
      '<?php',
      "/** AUTOGENERATED DO NOT EDIT */",
      "add_directory('{$this->examplesPath}/tests/plugins');",
      "load_config('config/local');",
    ];

    foreach ($plugins as $plugin) {
      $runner_code[] = "run_suite('{$plugin['id']}');";
    }
    $runner_file_path = $this->examplesPath . '/tests/runner_plugins.php';
    $result = file_put_contents($runner_file_path, implode(PHP_EOL, $runner_code));
    if (!$result) {
      throw new \RuntimeException(sprintf('Cannot create runner file: %s', $runner_file_path));
    }
  }

  /**
   * Compile the plugin schema file.
   *
   * @param string $id
   *   The plugin ID.
   * @param string $path_to_plugin
   *   The filepath to the plugin definition directory.
   */
  private function compilePlugin(string $id, string $path_to_plugin) {
    $this->compilePluginSchema($id, $path_to_plugin);
    $this->handleTests($id, $path_to_plugin);
  }

  private function ensureDir($filepath) {
    if (!is_dir($filepath)) {
      mkdir($filepath, 0755, TRUE);
    }
  }

  /**
   * Compile the plugin schema file.
   *
   * @param string $id
   *   The plugin ID.
   * @param string $path_to_plugin
   *   The filepath to the plugin definition directory.
   */
  private function handleTests(string $id, string $path_to_plugin) {
    $this->ensureDir($this->examplesPath . "/tests/plugins/");
    $this->ensureDir($this->examplesPath . "/web/plugins/");

    // Locate the file with the filename of 'test_subject'.
    $subject = array_first(array_filter(scandir($path_to_plugin), function ($path) {
      return pathinfo($path, PATHINFO_FILENAME) === 'test_subject';
    }));
    if (empty($subject)) {
      throw new \RuntimeException(sprintf('Missing filename "test_subject.*" for plugin %s.', $id));
    }

    $extension = pathinfo($subject, PATHINFO_EXTENSION);
    $suite_relative_path_final = "plugins/$id.$extension";
    copy("$path_to_plugin/$subject", $this->examplesPath . "/web/${suite_relative_path_final}");

    // The test suite.
    $plugin_suite = Yaml::parseFile($path_to_plugin . '/suite.yml');
    $plugin_suite = array_map(function (array $test) use ($subject, $suite_relative_path_final) {
      if (array_key_exists('visit', $test)) {
        $test['visit'] = str_replace($subject, $suite_relative_path_final, $test['visit']);
      }
      if (array_key_exists('url', $test)) {
        $test['url'] = str_replace($subject, $suite_relative_path_final, $test['url']);
      }

      return $test;
    }, $plugin_suite);
    file_put_contents($this->examplesPath . "/tests/plugins/{$id}.yml", Yaml::dump($plugin_suite, 6));
  }

  /**
   * Compile the plugin schema file.
   *
   * @param string $id
   *   The plugin ID.
   * @param string $path_to_plugin
   *   The filepath to the plugin definition directory.
   */
  private function compilePluginSchema(string $id, string $path_to_plugin) {
    if (empty($this->master)) {
      $this->master = $this->loadJson(str_replace('.json', '.template.json', $this->schemaPath));
    }

    if (isset($this->master['definitions'][$id])) {
      throw new \RuntimeException(sprintf('Plugin ID conflict; %s.definitions.%s already exists', basename($this->schemaPath), $id));
    }


    // The plugin MAY provide new #definitions.
    $schema_definitions_path = $path_to_plugin . '/schema.definitions.json';
    if (file_exists($schema_definitions_path)) {
      $to_merge = $this->loadJson($schema_definitions_path);
      $conflicting_keys = array_intersect_key($this->master['definitions'], $to_merge);
      if ($conflicting_keys) {
        throw new \RuntimeException(sprintf('The following definitions exist in the master schema and cannot be added by the plugin %s: %s', $id, implode(', ', $conflicting_keys)));
      }
      $this->master['definitions'] += $to_merge;
    }

    // The plugin must provide the find schema.
    $schema_find_path = $path_to_plugin . '/schema.find.json';
    $this->master['definitions'][$id] = $this->loadJson($schema_find_path);
    $this->master['items']['properties']['find']['oneOf'][1]['items']['oneOf'][] = [
      '$ref' => "#/definitions/{$id}",
    ];
    $this->saveJson($this->schemaPath, $this->master);

    // Update the schema in the plugins manager.
    $this->pluginsManager->setSchema($this->loadJson($this->schemaPath));
  }

  private function loadJson(string $filepath) {
    $data = json_decode(file_get_contents($filepath), TRUE);
    if (!$data) {
      throw new \RuntimeException(sprintf('Invalid JSON in %s', $filepath));
    }

    return $data;
  }

  private function saveJson($filepath, $data) {
    $result = file_put_contents($filepath, json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
    if (!$result) {
      throw new \RuntimeException(sprintf('Could not save %s', $filepath));
    }

    return $this;
  }

}
